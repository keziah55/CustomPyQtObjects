{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CustomQObjects API Some convenience classes for PyQt/PySide. CustomQObjects uses qtypy , so should work with any up-to-date PyQt/PySide installation. Widgets ClickMixin Bases: object Emit a clicked signal in :meth: mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 8 9 10 11 12 13 14 15 16 17 class ClickMixin ( object ): \"\"\" Emit a `clicked` signal in :meth:`mouseReleaseEvent` \"\"\" clicked = Signal () \"\"\" Signal emitted in :meth:`mouseReleaseEvent` \"\"\" def mouseReleaseEvent ( self , event ): \"\"\" Emit :attr:`clicked` and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event ) clicked = Signal () class-attribute Signal emitted in :meth: mouseReleaseEvent mouseReleaseEvent ( event ) Emit :attr: clicked and call super().mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 14 15 16 17 def mouseReleaseEvent ( self , event ): \"\"\" Emit :attr:`clicked` and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event ) ComboBox Bases: QComboBox QComboBox with items property and ability to automatically create item model. If list of NamedTuples passed as values , this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' will be displayed as text and 'value' will be returned by :meth: value . If values not provided, :meth: value will return the current text. Source code in customQObjects/widgets/combobox.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class ComboBox ( QComboBox ): \"\"\" QComboBox with `items` property and ability to automatically create item model. If list of NamedTuples passed as `values`, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' will be displayed as text and 'value' will be returned by :meth:`value`. If `values` not provided, :meth:`value` will return the current text. \"\"\" def __init__ ( self , * args , values : list [ NamedTuple ] = None , model = None , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if model is None : model = ComboBoxModel if values is not None : mdl = model ( values ) self . setModel ( mdl ) self . _values = values @property def items ( self ): \"\"\" Return list of text from all items. \"\"\" return [ self . itemText ( idx ) for idx in range ( self . count ())] @property def value ( self ): \"\"\" Return current value \"\"\" if self . _values is None : return self . currentText () else : return self . itemData ( self . currentIndex (), Qt . UserRole ) items property Return list of text from all items. value property Return current value DoubleSpinBox Bases: QDoubleSpinBox Source code in customQObjects/widgets/spinbox.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class DoubleSpinBox ( QDoubleSpinBox ): def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value ) def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value ) def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) setMaximum ( value = None ) Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 32 33 34 35 36 def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value ) setMinimum ( value = None ) Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 26 27 28 29 30 def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value ) setRange ( minimum = None , maximum = None ) Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 38 39 40 41 def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) ElideLabel Bases: ElideMixin , QLabel QLabel <https://doc.qt.io/qt-5/qlabel.html> _ that automatically elides its text. See :class: ElideMixin for additional args and kwargs. Source code in customQObjects/widgets/elidemixin.py 91 92 93 94 95 96 97 98 99 class ElideLabel ( ElideMixin , QLabel ): \"\"\" `QLabel <https://doc.qt.io/qt-5/qlabel.html>`_ that automatically elides its text. See :class:`ElideMixin` for additional args and kwargs. \"\"\" def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if len ( args ) == 1 : self . setText ( args [ 0 ]) ElideMixin Bases: object Mixin providing functionality to automatically elide text Parameters {'middle', 'left', 'right', 'None', Qt.TextElideMode} Text elide mode, either as string or Qt.TextElideMode <https://doc.qt.io/qt-6/qt.html#TextElideMode-enum> _ int, optional If provided, this value will be added to the widget's width when calling QFontMetrics.elidedText <https://doc.qt.io/qt-6/qfontmetrics.html#elidedText> _ Source code in customQObjects/widgets/elidemixin.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class ElideMixin ( object ): \"\"\" Mixin providing functionality to automatically elide text Parameters ---------- elideMode : {'middle', 'left', 'right', 'None', Qt.TextElideMode} Text elide mode, either as string or `Qt.TextElideMode <https://doc.qt.io/qt-6/qt.html#TextElideMode-enum>`_ widthAdjust : int, optional If provided, this value will be added to the widget's width when calling `QFontMetrics.elidedText <https://doc.qt.io/qt-6/qfontmetrics.html#elidedText>`_ \"\"\" elideModes = { 'left' : Qt . ElideLeft , 'middle' : Qt . ElideMiddle , 'right' : Qt . ElideRight , 'none' : Qt . ElideNone } def __init__ ( self , * args , elideMode = 'middle' , widthAdjust = 0 , ** kwargs ): self . _fullText = \"\" self . _widthAdjust = widthAdjust self . _elideMode = self . _validateMode ( elideMode ) super () . __init__ ( * args , ** kwargs ) @property def fullText ( self ): \"\"\" Un-elided text \"\"\" return self . _fullText @property def elideMode ( self ): \"\"\" Current elide mode \"\"\" return self . _elideMode @elideMode . setter def elideMode ( self , mode ): \"\"\" Set elide mode and update text \"\"\" self . _elideMode = self . _validateMode ( mode ) self . _resetText () @property def widthAdjust ( self ): \"\"\" Current width adjust \"\"\" return self . _widthAdjust @widthAdjust . setter def widthAdjust ( self , value ): \"\"\" Set width adjust and update text \"\"\" self . _widthAdjust = value self . _resetText () def _validateMode ( self , mode ): \"\"\" Return requested Qt.TextElideMode \"\"\" if mode is None : mode = 'none' if isinstance ( mode , str ): mode = mode . lower () if mode not in self . elideModes : raise ValueError ( f \"' { mode } ' not valid elide mode\" ) else : mode = self . elideModes [ mode ] else : if mode not in self . elideModes . values (): raise ValueError ( f \"' { mode } ' not valid elide mode\" ) return mode def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText ) def _resetText ( self ): \"\"\" Reset text from :attr:`fullText` \"\"\" self . setText ( self . _fullText ) def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText () elideMode writable property Current elide mode fullText property Un-elided text widthAdjust writable property Current width adjust resizeEvent ( event ) Override resizeEvent to update text Source code in customQObjects/widgets/elidemixin.py 87 88 89 def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText () setText ( text ) Elide text and set it Source code in customQObjects/widgets/elidemixin.py 75 76 77 78 79 80 81 def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText ) GroupBox Bases: QGroupBox QGroupBox <https://doc.qt.io/qt-5/qgroupbox.html> _ with a layout automatically set. Parameters {\"vbox\", \"hbox\", \"grid\", \"form\", QLayout} Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e. QVBoxLayout. args Args to pass to QGroupBox constructor kwargs Kwargs to pass to QGroupBox constructor Source code in customQObjects/widgets/groupbox.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class GroupBox ( QGroupBox ): \"\"\" `QGroupBox <https://doc.qt.io/qt-5/qgroupbox.html>`_ with a layout automatically set. Parameters ---------- layout : {\"vbox\", \"hbox\", \"grid\", \"form\", QLayout} Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e. QVBoxLayout. args Args to pass to QGroupBox constructor kwargs Kwargs to pass to QGroupBox constructor \"\"\" def __init__ ( self , * args , layout = \"vbox\" , ** kwargs ): super () . __init__ ( * args , ** kwargs ) layouts = { \"vbox\" : QVBoxLayout , \"hbox\" : QHBoxLayout , \"grid\" : QGridLayout , \"form\" : QFormLayout } if isinstance ( layout , str ): if layout not in layout : valid = \"' {} ', ' {} ' or ' {} '\" . format ( * layouts . keys ()) msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) layoutObj = layouts [ layout ] self . layout = layoutObj () elif isinstance ( layout , QLayout ): self . layout = layout else : msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) self . setLayout ( self . layout ) def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs ) def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs ) def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs ) addLayout ( * args , ** kwargs ) Add a layout to the internal layout. Source code in customQObjects/widgets/groupbox.py 40 41 42 def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs ) addRow ( * args , ** kwargs ) Add row to a form layout Source code in customQObjects/widgets/groupbox.py 44 45 46 47 48 def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs ) addWidget ( * args , ** kwargs ) Add a widget to the internal layout. Source code in customQObjects/widgets/groupbox.py 36 37 38 def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs ) HSplitter Bases: Splitter :class: Splitter with horizontal orientation Source code in customQObjects/widgets/splitter.py 23 24 25 26 class HSplitter ( Splitter ): \"\"\" :class:`Splitter` with horizontal orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Horizontal , parent = parent ) SpinBox Bases: QSpinBox Source code in customQObjects/widgets/spinbox.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class SpinBox ( QSpinBox ): def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value ) def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value ) def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) setMaximum ( value = None ) Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 14 15 16 17 18 def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value ) setMinimum ( value = None ) Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 8 9 10 11 12 def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value ) setRange ( minimum = None , maximum = None ) Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 20 21 22 23 def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) Splitter Bases: QSplitter QSplitter with :meth: addLayout method Source code in customQObjects/widgets/splitter.py 4 5 6 7 8 9 10 11 12 13 14 15 16 class Splitter ( QSplitter ): \"\"\" QSplitter with :meth:`addLayout` method \"\"\" def addLayout ( self , layout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container ) def setStretchFactors ( self , stretch ): \"\"\" Set multiple stretch factors \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf ) addLayout ( layout ) Add layout to splitter by creating a container widget for it Source code in customQObjects/widgets/splitter.py 7 8 9 10 11 def addLayout ( self , layout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container ) setStretchFactors ( stretch ) Set multiple stretch factors Source code in customQObjects/widgets/splitter.py 13 14 15 16 def setStretchFactors ( self , stretch ): \"\"\" Set multiple stretch factors \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf ) StackedWidget Bases: QStackedWidget QStackedWidget that stores references to its pages in a dict. Also can pass dict of pages to initialise the stack. Source code in customQObjects/widgets/stackedwidget.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class StackedWidget ( QStackedWidget ): \"\"\" QStackedWidget that stores references to its pages in a dict. Also can pass dict of `pages` to initialise the stack. \"\"\" def __init__ ( self , * args , pages = {}, ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _widgetDict = {} for key , widget in pages . items (): self . addWidget ( widget , key ) def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" ) @property def widgetDict ( self ): \"\"\" Return dictionary of keys and widgets \"\"\" return self . _widgetDict @property def widgets ( self ): \"\"\" Return list of all widgets \"\"\" return [ self . widget ( idx ) for idx in range ( self . count ())] def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget ) def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget ) def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a QWidget instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ] def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ]) widgetDict property Return dictionary of keys and widgets widgets property Return list of all widgets __getitem__ ( key ) Get widget identified by key Source code in customQObjects/widgets/stackedwidget.py 21 22 23 24 25 26 27 def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" ) addWidget ( widget , key = None ) Add widget to the stack, associated with key key . If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 39 40 41 42 43 44 45 46 47 48 49 def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget ) insertWidget ( index , widget , key = None ) Insert widget to the stack, associated with key key , at position index If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 51 52 53 54 55 56 57 58 59 60 61 def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget ) keyOf ( widget ) Return key associated with widget . Source code in customQObjects/widgets/stackedwidget.py 73 74 75 76 77 78 def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None removeWidget ( widget ) Remove widget from stack. widget can be a QWidget instance or a key. Source code in customQObjects/widgets/stackedwidget.py 63 64 65 66 67 68 69 70 71 def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a QWidget instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ] setCurrentKey ( key ) Set current widget to that identified by key Source code in customQObjects/widgets/stackedwidget.py 80 81 82 def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ]) TimerDialog Bases: QDialog QDialog <https://doc.qt.io/qt-5/qdialog.html> _ that will timeout after a given number of milliseconds. Parameters int Number of milliseconds for the dialog to be shown. Default is 3000. Source code in customQObjects/widgets/timerdialog.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class TimerDialog ( QDialog ): \"\"\" `QDialog <https://doc.qt.io/qt-5/qdialog.html>`_ that will timeout after a given number of milliseconds. Parameters ---------- timeout : int Number of milliseconds for the dialog to be shown. Default is 3000. \"\"\" def __init__ ( self , timeout = 3000 ): super () . __init__ () self . timer = QTimer () self . timer . setInterval ( timeout ) self . timer . setSingleShot ( True ) self . timer . timeout . connect ( self . accept ) def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs ) exec_ ( * args , ** kwargs ) Show the dialog and start the timer. Source code in customQObjects/widgets/timerdialog.py 20 21 22 23 def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs ) VSplitter Bases: Splitter :class: Splitter with vertical orientation Source code in customQObjects/widgets/splitter.py 18 19 20 21 class VSplitter ( Splitter ): \"\"\" :class:`Splitter` with vertical orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Vertical , parent = parent ) Core Settings Bases: QSettings QSettings subclass that provides :meth: value method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. Source code in customQObjects/core/settings.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Settings ( QSettings ): \"\"\" QSettings subclass that provides :meth:`value` method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. \"\"\" def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v value ( key , defaultValue = None , cast = None ) Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters str Setting to be returned object, optional If key is not in the settings, return defaultValue . Default is None type, optional If provided, cast the value to the given type Source code in customQObjects/core/settings.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v Gui getIconFromTheme ( name ) If QIcon.hasThemeIcon(name) is True, return the QIcon.fromTheme(name) . Otherwise, return None. Source code in customQObjects/gui/__init__.py 3 4 5 6 7 8 9 10 11 def getIconFromTheme ( name ): \"\"\" If `QIcon.hasThemeIcon(name)` is True, return the `QIcon.fromTheme(name)`. Otherwise, return None. \"\"\" if QIcon . hasThemeIcon ( name ): return QIcon . fromTheme ( name ) else : return None","title":"Home"},{"location":"#customqobjects-api","text":"Some convenience classes for PyQt/PySide. CustomQObjects uses qtypy , so should work with any up-to-date PyQt/PySide installation.","title":"CustomQObjects API"},{"location":"#widgets","text":"","title":"Widgets"},{"location":"#customQObjects.widgets.ClickMixin","text":"Bases: object Emit a clicked signal in :meth: mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 8 9 10 11 12 13 14 15 16 17 class ClickMixin ( object ): \"\"\" Emit a `clicked` signal in :meth:`mouseReleaseEvent` \"\"\" clicked = Signal () \"\"\" Signal emitted in :meth:`mouseReleaseEvent` \"\"\" def mouseReleaseEvent ( self , event ): \"\"\" Emit :attr:`clicked` and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event )","title":"ClickMixin"},{"location":"#customQObjects.widgets.simplemixins.ClickMixin.clicked","text":"Signal emitted in :meth: mouseReleaseEvent","title":"clicked"},{"location":"#customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent","text":"Emit :attr: clicked and call super().mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 14 15 16 17 def mouseReleaseEvent ( self , event ): \"\"\" Emit :attr:`clicked` and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event )","title":"mouseReleaseEvent()"},{"location":"#customQObjects.widgets.ComboBox","text":"Bases: QComboBox QComboBox with items property and ability to automatically create item model. If list of NamedTuples passed as values , this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' will be displayed as text and 'value' will be returned by :meth: value . If values not provided, :meth: value will return the current text. Source code in customQObjects/widgets/combobox.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class ComboBox ( QComboBox ): \"\"\" QComboBox with `items` property and ability to automatically create item model. If list of NamedTuples passed as `values`, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' will be displayed as text and 'value' will be returned by :meth:`value`. If `values` not provided, :meth:`value` will return the current text. \"\"\" def __init__ ( self , * args , values : list [ NamedTuple ] = None , model = None , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if model is None : model = ComboBoxModel if values is not None : mdl = model ( values ) self . setModel ( mdl ) self . _values = values @property def items ( self ): \"\"\" Return list of text from all items. \"\"\" return [ self . itemText ( idx ) for idx in range ( self . count ())] @property def value ( self ): \"\"\" Return current value \"\"\" if self . _values is None : return self . currentText () else : return self . itemData ( self . currentIndex (), Qt . UserRole )","title":"ComboBox"},{"location":"#customQObjects.widgets.combobox.ComboBox.items","text":"Return list of text from all items.","title":"items"},{"location":"#customQObjects.widgets.combobox.ComboBox.value","text":"Return current value","title":"value"},{"location":"#customQObjects.widgets.DoubleSpinBox","text":"Bases: QDoubleSpinBox Source code in customQObjects/widgets/spinbox.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class DoubleSpinBox ( QDoubleSpinBox ): def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value ) def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value ) def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"DoubleSpinBox"},{"location":"#customQObjects.widgets.spinbox.DoubleSpinBox.setMaximum","text":"Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 32 33 34 35 36 def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value )","title":"setMaximum()"},{"location":"#customQObjects.widgets.spinbox.DoubleSpinBox.setMinimum","text":"Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 26 27 28 29 30 def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value )","title":"setMinimum()"},{"location":"#customQObjects.widgets.spinbox.DoubleSpinBox.setRange","text":"Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 38 39 40 41 def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"setRange()"},{"location":"#customQObjects.widgets.ElideLabel","text":"Bases: ElideMixin , QLabel QLabel <https://doc.qt.io/qt-5/qlabel.html> _ that automatically elides its text. See :class: ElideMixin for additional args and kwargs. Source code in customQObjects/widgets/elidemixin.py 91 92 93 94 95 96 97 98 99 class ElideLabel ( ElideMixin , QLabel ): \"\"\" `QLabel <https://doc.qt.io/qt-5/qlabel.html>`_ that automatically elides its text. See :class:`ElideMixin` for additional args and kwargs. \"\"\" def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if len ( args ) == 1 : self . setText ( args [ 0 ])","title":"ElideLabel"},{"location":"#customQObjects.widgets.ElideMixin","text":"Bases: object Mixin providing functionality to automatically elide text","title":"ElideMixin"},{"location":"#customQObjects.widgets.ElideMixin--parameters","text":"{'middle', 'left', 'right', 'None', Qt.TextElideMode} Text elide mode, either as string or Qt.TextElideMode <https://doc.qt.io/qt-6/qt.html#TextElideMode-enum> _ int, optional If provided, this value will be added to the widget's width when calling QFontMetrics.elidedText <https://doc.qt.io/qt-6/qfontmetrics.html#elidedText> _ Source code in customQObjects/widgets/elidemixin.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class ElideMixin ( object ): \"\"\" Mixin providing functionality to automatically elide text Parameters ---------- elideMode : {'middle', 'left', 'right', 'None', Qt.TextElideMode} Text elide mode, either as string or `Qt.TextElideMode <https://doc.qt.io/qt-6/qt.html#TextElideMode-enum>`_ widthAdjust : int, optional If provided, this value will be added to the widget's width when calling `QFontMetrics.elidedText <https://doc.qt.io/qt-6/qfontmetrics.html#elidedText>`_ \"\"\" elideModes = { 'left' : Qt . ElideLeft , 'middle' : Qt . ElideMiddle , 'right' : Qt . ElideRight , 'none' : Qt . ElideNone } def __init__ ( self , * args , elideMode = 'middle' , widthAdjust = 0 , ** kwargs ): self . _fullText = \"\" self . _widthAdjust = widthAdjust self . _elideMode = self . _validateMode ( elideMode ) super () . __init__ ( * args , ** kwargs ) @property def fullText ( self ): \"\"\" Un-elided text \"\"\" return self . _fullText @property def elideMode ( self ): \"\"\" Current elide mode \"\"\" return self . _elideMode @elideMode . setter def elideMode ( self , mode ): \"\"\" Set elide mode and update text \"\"\" self . _elideMode = self . _validateMode ( mode ) self . _resetText () @property def widthAdjust ( self ): \"\"\" Current width adjust \"\"\" return self . _widthAdjust @widthAdjust . setter def widthAdjust ( self , value ): \"\"\" Set width adjust and update text \"\"\" self . _widthAdjust = value self . _resetText () def _validateMode ( self , mode ): \"\"\" Return requested Qt.TextElideMode \"\"\" if mode is None : mode = 'none' if isinstance ( mode , str ): mode = mode . lower () if mode not in self . elideModes : raise ValueError ( f \"' { mode } ' not valid elide mode\" ) else : mode = self . elideModes [ mode ] else : if mode not in self . elideModes . values (): raise ValueError ( f \"' { mode } ' not valid elide mode\" ) return mode def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText ) def _resetText ( self ): \"\"\" Reset text from :attr:`fullText` \"\"\" self . setText ( self . _fullText ) def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText ()","title":"Parameters"},{"location":"#customQObjects.widgets.elidemixin.ElideMixin.elideMode","text":"Current elide mode","title":"elideMode"},{"location":"#customQObjects.widgets.elidemixin.ElideMixin.fullText","text":"Un-elided text","title":"fullText"},{"location":"#customQObjects.widgets.elidemixin.ElideMixin.widthAdjust","text":"Current width adjust","title":"widthAdjust"},{"location":"#customQObjects.widgets.elidemixin.ElideMixin.resizeEvent","text":"Override resizeEvent to update text Source code in customQObjects/widgets/elidemixin.py 87 88 89 def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText ()","title":"resizeEvent()"},{"location":"#customQObjects.widgets.elidemixin.ElideMixin.setText","text":"Elide text and set it Source code in customQObjects/widgets/elidemixin.py 75 76 77 78 79 80 81 def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText )","title":"setText()"},{"location":"#customQObjects.widgets.GroupBox","text":"Bases: QGroupBox QGroupBox <https://doc.qt.io/qt-5/qgroupbox.html> _ with a layout automatically set.","title":"GroupBox"},{"location":"#customQObjects.widgets.GroupBox--parameters","text":"{\"vbox\", \"hbox\", \"grid\", \"form\", QLayout} Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e. QVBoxLayout. args Args to pass to QGroupBox constructor kwargs Kwargs to pass to QGroupBox constructor Source code in customQObjects/widgets/groupbox.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class GroupBox ( QGroupBox ): \"\"\" `QGroupBox <https://doc.qt.io/qt-5/qgroupbox.html>`_ with a layout automatically set. Parameters ---------- layout : {\"vbox\", \"hbox\", \"grid\", \"form\", QLayout} Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e. QVBoxLayout. args Args to pass to QGroupBox constructor kwargs Kwargs to pass to QGroupBox constructor \"\"\" def __init__ ( self , * args , layout = \"vbox\" , ** kwargs ): super () . __init__ ( * args , ** kwargs ) layouts = { \"vbox\" : QVBoxLayout , \"hbox\" : QHBoxLayout , \"grid\" : QGridLayout , \"form\" : QFormLayout } if isinstance ( layout , str ): if layout not in layout : valid = \"' {} ', ' {} ' or ' {} '\" . format ( * layouts . keys ()) msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) layoutObj = layouts [ layout ] self . layout = layoutObj () elif isinstance ( layout , QLayout ): self . layout = layout else : msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) self . setLayout ( self . layout ) def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs ) def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs ) def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs )","title":"Parameters"},{"location":"#customQObjects.widgets.groupbox.GroupBox.addLayout","text":"Add a layout to the internal layout. Source code in customQObjects/widgets/groupbox.py 40 41 42 def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs )","title":"addLayout()"},{"location":"#customQObjects.widgets.groupbox.GroupBox.addRow","text":"Add row to a form layout Source code in customQObjects/widgets/groupbox.py 44 45 46 47 48 def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs )","title":"addRow()"},{"location":"#customQObjects.widgets.groupbox.GroupBox.addWidget","text":"Add a widget to the internal layout. Source code in customQObjects/widgets/groupbox.py 36 37 38 def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs )","title":"addWidget()"},{"location":"#customQObjects.widgets.HSplitter","text":"Bases: Splitter :class: Splitter with horizontal orientation Source code in customQObjects/widgets/splitter.py 23 24 25 26 class HSplitter ( Splitter ): \"\"\" :class:`Splitter` with horizontal orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Horizontal , parent = parent )","title":"HSplitter"},{"location":"#customQObjects.widgets.SpinBox","text":"Bases: QSpinBox Source code in customQObjects/widgets/spinbox.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class SpinBox ( QSpinBox ): def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value ) def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value ) def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"SpinBox"},{"location":"#customQObjects.widgets.spinbox.SpinBox.setMaximum","text":"Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 14 15 16 17 18 def setMaximum ( self , value = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value )","title":"setMaximum()"},{"location":"#customQObjects.widgets.spinbox.SpinBox.setMinimum","text":"Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 8 9 10 11 12 def setMinimum ( self , value = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value )","title":"setMinimum()"},{"location":"#customQObjects.widgets.spinbox.SpinBox.setRange","text":"Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 20 21 22 23 def setRange ( self , minimum = None , maximum = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"setRange()"},{"location":"#customQObjects.widgets.Splitter","text":"Bases: QSplitter QSplitter with :meth: addLayout method Source code in customQObjects/widgets/splitter.py 4 5 6 7 8 9 10 11 12 13 14 15 16 class Splitter ( QSplitter ): \"\"\" QSplitter with :meth:`addLayout` method \"\"\" def addLayout ( self , layout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container ) def setStretchFactors ( self , stretch ): \"\"\" Set multiple stretch factors \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf )","title":"Splitter"},{"location":"#customQObjects.widgets.splitter.Splitter.addLayout","text":"Add layout to splitter by creating a container widget for it Source code in customQObjects/widgets/splitter.py 7 8 9 10 11 def addLayout ( self , layout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container )","title":"addLayout()"},{"location":"#customQObjects.widgets.splitter.Splitter.setStretchFactors","text":"Set multiple stretch factors Source code in customQObjects/widgets/splitter.py 13 14 15 16 def setStretchFactors ( self , stretch ): \"\"\" Set multiple stretch factors \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf )","title":"setStretchFactors()"},{"location":"#customQObjects.widgets.StackedWidget","text":"Bases: QStackedWidget QStackedWidget that stores references to its pages in a dict. Also can pass dict of pages to initialise the stack. Source code in customQObjects/widgets/stackedwidget.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class StackedWidget ( QStackedWidget ): \"\"\" QStackedWidget that stores references to its pages in a dict. Also can pass dict of `pages` to initialise the stack. \"\"\" def __init__ ( self , * args , pages = {}, ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _widgetDict = {} for key , widget in pages . items (): self . addWidget ( widget , key ) def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" ) @property def widgetDict ( self ): \"\"\" Return dictionary of keys and widgets \"\"\" return self . _widgetDict @property def widgets ( self ): \"\"\" Return list of all widgets \"\"\" return [ self . widget ( idx ) for idx in range ( self . count ())] def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget ) def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget ) def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a QWidget instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ] def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ])","title":"StackedWidget"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.widgetDict","text":"Return dictionary of keys and widgets","title":"widgetDict"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.widgets","text":"Return list of all widgets","title":"widgets"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.__getitem__","text":"Get widget identified by key Source code in customQObjects/widgets/stackedwidget.py 21 22 23 24 25 26 27 def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" )","title":"__getitem__()"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.addWidget","text":"Add widget to the stack, associated with key key . If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 39 40 41 42 43 44 45 46 47 48 49 def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget )","title":"addWidget()"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.insertWidget","text":"Insert widget to the stack, associated with key key , at position index If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 51 52 53 54 55 56 57 58 59 60 61 def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget )","title":"insertWidget()"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.keyOf","text":"Return key associated with widget . Source code in customQObjects/widgets/stackedwidget.py 73 74 75 76 77 78 def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None","title":"keyOf()"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.removeWidget","text":"Remove widget from stack. widget can be a QWidget instance or a key. Source code in customQObjects/widgets/stackedwidget.py 63 64 65 66 67 68 69 70 71 def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a QWidget instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ]","title":"removeWidget()"},{"location":"#customQObjects.widgets.stackedwidget.StackedWidget.setCurrentKey","text":"Set current widget to that identified by key Source code in customQObjects/widgets/stackedwidget.py 80 81 82 def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ])","title":"setCurrentKey()"},{"location":"#customQObjects.widgets.TimerDialog","text":"Bases: QDialog QDialog <https://doc.qt.io/qt-5/qdialog.html> _ that will timeout after a given number of milliseconds.","title":"TimerDialog"},{"location":"#customQObjects.widgets.TimerDialog--parameters","text":"int Number of milliseconds for the dialog to be shown. Default is 3000. Source code in customQObjects/widgets/timerdialog.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class TimerDialog ( QDialog ): \"\"\" `QDialog <https://doc.qt.io/qt-5/qdialog.html>`_ that will timeout after a given number of milliseconds. Parameters ---------- timeout : int Number of milliseconds for the dialog to be shown. Default is 3000. \"\"\" def __init__ ( self , timeout = 3000 ): super () . __init__ () self . timer = QTimer () self . timer . setInterval ( timeout ) self . timer . setSingleShot ( True ) self . timer . timeout . connect ( self . accept ) def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs )","title":"Parameters"},{"location":"#customQObjects.widgets.timerdialog.TimerDialog.exec_","text":"Show the dialog and start the timer. Source code in customQObjects/widgets/timerdialog.py 20 21 22 23 def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs )","title":"exec_()"},{"location":"#customQObjects.widgets.VSplitter","text":"Bases: Splitter :class: Splitter with vertical orientation Source code in customQObjects/widgets/splitter.py 18 19 20 21 class VSplitter ( Splitter ): \"\"\" :class:`Splitter` with vertical orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Vertical , parent = parent )","title":"VSplitter"},{"location":"#core","text":"","title":"Core"},{"location":"#customQObjects.core.Settings","text":"Bases: QSettings QSettings subclass that provides :meth: value method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. Source code in customQObjects/core/settings.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Settings ( QSettings ): \"\"\" QSettings subclass that provides :meth:`value` method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. \"\"\" def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v","title":"Settings"},{"location":"#customQObjects.core.settings.Settings.value","text":"Get value from settings. If value is \"true\" or \"false\", return True or False.","title":"value()"},{"location":"#customQObjects.core.settings.Settings.value--parameters","text":"str Setting to be returned object, optional If key is not in the settings, return defaultValue . Default is None type, optional If provided, cast the value to the given type Source code in customQObjects/core/settings.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v","title":"Parameters"},{"location":"#gui","text":"","title":"Gui"},{"location":"#customQObjects.gui.getIconFromTheme","text":"If QIcon.hasThemeIcon(name) is True, return the QIcon.fromTheme(name) . Otherwise, return None. Source code in customQObjects/gui/__init__.py 3 4 5 6 7 8 9 10 11 def getIconFromTheme ( name ): \"\"\" If `QIcon.hasThemeIcon(name)` is True, return the `QIcon.fromTheme(name)`. Otherwise, return None. \"\"\" if QIcon . hasThemeIcon ( name ): return QIcon . fromTheme ( name ) else : return None","title":"getIconFromTheme()"}]}