{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CustomQObjects API Some convenience classes for PyQt/PySide. CustomQObjects uses qtypy , so should work with any up-to-date PyQt/PySide installation. Customized QtWidgets are documented here , QtCore objects here and QtGui objects here .","title":"Home"},{"location":"#customqobjects-api","text":"Some convenience classes for PyQt/PySide. CustomQObjects uses qtypy , so should work with any up-to-date PyQt/PySide installation. Customized QtWidgets are documented here , QtCore objects here and QtGui objects here .","title":"CustomQObjects API"},{"location":"core/","text":"Core Settings Bases: QSettings QSettings subclass that provides value method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. Source code in customQObjects/core/settings.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Settings ( QSettings ): \"\"\" [QSettings](https://doc.qt.io/qt-6/qsettings.html) subclass that provides [value][customQObjects.core.Settings.value] method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. \"\"\" def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v value ( key , defaultValue = None , cast = None ) Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters: Name Type Description Default key str Setting to be returned required defaultValue object , optional If key is not in the settings, return defaultValue . Default is None None cast type , optional If provided, cast the value to the given type None Source code in customQObjects/core/settings.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v","title":"Core"},{"location":"core/#core","text":"","title":"Core"},{"location":"core/#customQObjects.core.Settings","text":"Bases: QSettings QSettings subclass that provides value method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. Source code in customQObjects/core/settings.py 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Settings ( QSettings ): \"\"\" [QSettings](https://doc.qt.io/qt-6/qsettings.html) subclass that provides [value][customQObjects.core.Settings.value] method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type. \"\"\" def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v","title":"Settings"},{"location":"core/#customQObjects.core.settings.Settings.value","text":"Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters: Name Type Description Default key str Setting to be returned required defaultValue object , optional If key is not in the settings, return defaultValue . Default is None None cast type , optional If provided, cast the value to the given type None Source code in customQObjects/core/settings.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def value ( self , key , defaultValue = None , cast = None ): \"\"\" Get value from settings. If value is \"true\" or \"false\", return True or False. Parameters ---------- key : str Setting to be returned defaultValue : object, optional If `key` is not in the settings, return `defaultValue`. Default is None cast : type, optional If provided, cast the value to the given type \"\"\" v = super () . value ( key , defaultValue = defaultValue ) if v == 'true' : v = True elif v == 'false' : v = False elif cast is not None : v = cast ( v ) return v","title":"value()"},{"location":"gui/","text":"Gui getIconFromTheme ( name ) If QIcon.hasThemeIcon(name) is True, return QIcon.fromTheme(name) . Otherwise, return None. Source code in customQObjects/gui/__init__.py 3 4 5 6 7 8 9 10 11 12 13 def getIconFromTheme ( name : str ) -> QIcon : \"\"\" If [QIcon.hasThemeIcon(name)](https://doc.qt.io/qt-6/qicon.html#hasThemeIcon) is True, return [QIcon.fromTheme(name)](https://doc.qt.io/qt-6/qicon.html#fromTheme). Otherwise, return None. \"\"\" if QIcon . hasThemeIcon ( name ): return QIcon . fromTheme ( name ) else : return None makeBrush ( arg ) Return a QBrush from arg . arg can be a QBrush , QColor or any valid QColor constructor arg. Source code in customQObjects/gui/__init__.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def makeBrush ( arg ) -> QBrush : \"\"\" Return a [QBrush](https://doc.qt.io/qt-6/qbrush.html) from `arg`. `arg` can be a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid [QColor](https://doc.qt.io/qt-6/qcolor.html) constructor arg. \"\"\" if isinstance ( arg , QBrush ): return arg if isinstance ( arg , QColor ): return QBrush ( arg ) if isinstance ( arg , str ): try : color = QColor ( arg ) except : raise ValueError ( f \"Could not construct QBrush from ' { arg } '\" ) else : return QBrush ( color ) return None","title":"Gui"},{"location":"gui/#gui","text":"","title":"Gui"},{"location":"gui/#customQObjects.gui.getIconFromTheme","text":"If QIcon.hasThemeIcon(name) is True, return QIcon.fromTheme(name) . Otherwise, return None. Source code in customQObjects/gui/__init__.py 3 4 5 6 7 8 9 10 11 12 13 def getIconFromTheme ( name : str ) -> QIcon : \"\"\" If [QIcon.hasThemeIcon(name)](https://doc.qt.io/qt-6/qicon.html#hasThemeIcon) is True, return [QIcon.fromTheme(name)](https://doc.qt.io/qt-6/qicon.html#fromTheme). Otherwise, return None. \"\"\" if QIcon . hasThemeIcon ( name ): return QIcon . fromTheme ( name ) else : return None","title":"getIconFromTheme()"},{"location":"gui/#customQObjects.gui.makeBrush","text":"Return a QBrush from arg . arg can be a QBrush , QColor or any valid QColor constructor arg. Source code in customQObjects/gui/__init__.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def makeBrush ( arg ) -> QBrush : \"\"\" Return a [QBrush](https://doc.qt.io/qt-6/qbrush.html) from `arg`. `arg` can be a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid [QColor](https://doc.qt.io/qt-6/qcolor.html) constructor arg. \"\"\" if isinstance ( arg , QBrush ): return arg if isinstance ( arg , QColor ): return QBrush ( arg ) if isinstance ( arg , str ): try : color = QColor ( arg ) except : raise ValueError ( f \"Could not construct QBrush from ' { arg } '\" ) else : return QBrush ( color ) return None","title":"makeBrush()"},{"location":"widgets/","text":"Widgets ClickMixin Bases: object Emit a clicked signal in mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 8 9 10 11 12 13 14 15 16 17 class ClickMixin ( object ): \"\"\" Emit a `clicked` signal in [mouseReleaseEvent][customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent] \"\"\" clicked = Signal () \"\"\" Signal emitted in [mouseReleaseEvent][customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent] \"\"\" def mouseReleaseEvent ( self , event ): \"\"\" Emit [clicked][customQObjects.widgets.simplemixins.ClickMixin.clicked] signal and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event ) clicked = Signal () class-attribute Signal emitted in mouseReleaseEvent mouseReleaseEvent ( event ) Emit clicked signal and call super().mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 14 15 16 17 def mouseReleaseEvent ( self , event ): \"\"\" Emit [clicked][customQObjects.widgets.simplemixins.ClickMixin.clicked] signal and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event ) ComboBox Bases: QComboBox QComboBox with items property and ability to automatically create item model. Parameters: Name Type Description Default values list [ NamedTuple ], optional If provided, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' is displayed as text and 'value' is returned by value . If not provided, value will return the current text. None model QAbstractListModel , optional Model to use. If not provided, a model is created that returns the 'name' and 'value' from the values list when asked for the Qt.DisplayRole and Qt.UserRole respectively None args QComboBox args () kwargs QComboBox kwargs {} Source code in customQObjects/widgets/combobox.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 class ComboBox ( QComboBox ): \"\"\" [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) with [items][customQObjects.widgets.ComboBox.items] property and ability to automatically create item model. Parameters ---------- values : list[NamedTuple], optional If provided, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' is displayed as text and 'value' is returned by [value][customQObjects.widgets.combobox.ComboBox.value]. If not provided, [value][customQObjects.widgets.combobox.ComboBox.value] will return the current text. model : QAbstractListModel, optional Model to use. If not provided, a model is created that returns the 'name' and 'value' from the `values` list when asked for the [Qt.DisplayRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum) and [Qt.UserRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum) respectively args : [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) args kwargs : [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) kwargs \"\"\" def __init__ ( self , * args , values : list [ NamedTuple ] = None , model = None , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if model is None : model = ComboBoxModel if values is not None : mdl = model ( values ) self . setModel ( mdl ) self . _values = values @property def items ( self ): \"\"\" Return list of text from all items. \"\"\" return [ self . itemText ( idx ) for idx in range ( self . count ())] @property def value ( self ): \"\"\" Return current value \"\"\" if self . _values is None : return self . currentText () else : return self . itemData ( self . currentIndex (), Qt . UserRole ) items property Return list of text from all items. value property Return current value DoubleSpinBox Bases: QDoubleSpinBox QDoubleSpinBox that allows min and max to be essentially unset. See Also SpinBox Source code in customQObjects/widgets/spinbox.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class DoubleSpinBox ( QDoubleSpinBox ): \"\"\" [QDoubleSpinBox](https://doc.qt.io/qt-6/qsdoublepinbox.html) that allows min and max to be essentially unset. See Also -------- [SpinBox][customQObjects.widgets.SpinBox] \"\"\" def setMinimum ( self , value : float = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value ) def setMaximum ( self , value : float = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value ) def setRange ( self , minimum : float = None , maximum : float = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) setMaximum ( value = None ) Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 46 47 48 49 50 def setMaximum ( self , value : float = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value ) setMinimum ( value = None ) Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 40 41 42 43 44 def setMinimum ( self , value : float = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value ) setRange ( minimum = None , maximum = None ) Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 52 53 54 55 def setRange ( self , minimum : float = None , maximum : float = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) ElideLabel Bases: ElideMixin , QLabel QLabel that automatically elides its text. See ElideMixin for additional args and kwargs. Source code in customQObjects/widgets/elidemixin.py 91 92 93 94 95 96 97 98 99 class ElideLabel ( ElideMixin , QLabel ): \"\"\" [QLabel](https://doc.qt.io/qt-5/qlabel.html) that automatically elides its text. See [ElideMixin][customQObjects.widgets.ElideMixin] for additional args and kwargs. \"\"\" def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if len ( args ) == 1 : self . setText ( args [ 0 ]) ElideMixin Bases: object Mixin providing functionality to automatically elide text Parameters: Name Type Description Default elideMode Text elide mode, either as string or Qt.TextElideMode 'middle' widthAdjust int , optional If provided, this value will be added to the widget's width when calling QFontMetrics.elidedText 0 Source code in customQObjects/widgets/elidemixin.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class ElideMixin ( object ): \"\"\" Mixin providing functionality to automatically elide text Parameters ---------- elideMode : {'middle', 'left', 'right', 'None', Qt.TextElideMode} Text elide mode, either as string or [Qt.TextElideMode](https://doc.qt.io/qt-6/qt.html#TextElideMode-enum>) widthAdjust : int, optional If provided, this value will be added to the widget's width when calling [QFontMetrics.elidedText](https://doc.qt.io/qt-6/qfontmetrics.html#elidedText) \"\"\" elideModes = { 'left' : Qt . ElideLeft , 'middle' : Qt . ElideMiddle , 'right' : Qt . ElideRight , 'none' : Qt . ElideNone } def __init__ ( self , * args , elideMode = 'middle' , widthAdjust = 0 , ** kwargs ): self . _fullText = \"\" self . _widthAdjust = widthAdjust self . _elideMode = self . _validateMode ( elideMode ) super () . __init__ ( * args , ** kwargs ) @property def fullText ( self ): \"\"\" Un-elided text \"\"\" return self . _fullText @property def elideMode ( self ): \"\"\" Current elide mode \"\"\" return self . _elideMode @elideMode . setter def elideMode ( self , mode ): \"\"\" Set elide mode and update text \"\"\" self . _elideMode = self . _validateMode ( mode ) self . _resetText () @property def widthAdjust ( self ): \"\"\" Current width adjust \"\"\" return self . _widthAdjust @widthAdjust . setter def widthAdjust ( self , value ): \"\"\" Set width adjust and update text \"\"\" self . _widthAdjust = value self . _resetText () def _validateMode ( self , mode ): \"\"\" Return requested Qt.TextElideMode \"\"\" if mode is None : mode = 'none' if isinstance ( mode , str ): mode = mode . lower () if mode not in self . elideModes : raise ValueError ( f \"' { mode } ' not valid elide mode\" ) else : mode = self . elideModes [ mode ] else : if mode not in self . elideModes . values (): raise ValueError ( f \"' { mode } ' not valid elide mode\" ) return mode def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText ) def _resetText ( self ): \"\"\" Reset text from :attr:`fullText` \"\"\" self . setText ( self . _fullText ) def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText () elideMode writable property Current elide mode fullText property Un-elided text widthAdjust writable property Current width adjust resizeEvent ( event ) Override resizeEvent to update text Source code in customQObjects/widgets/elidemixin.py 87 88 89 def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText () setText ( text ) Elide text and set it Source code in customQObjects/widgets/elidemixin.py 75 76 77 78 79 80 81 def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText ) GroupBox Bases: QGroupBox QGroupBox with a layout automatically set. Parameters: Name Type Description Default layout Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e. QVBoxLayout . \"vbox\" args Args to pass to QGroupBox constructor () kwargs Kwargs to pass to QGroupBox constructor {} Source code in customQObjects/widgets/groupbox.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class GroupBox ( QGroupBox ): \"\"\" [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) with a layout automatically set. Parameters ---------- layout : {\"vbox\", \"hbox\", \"grid\", \"form\", QLayout} Type of layout to create. If given a [QLayout](https://doc.qt.io/qt-6/qlayout.html) instance, that will be used. Default is \"vbox\", i.e. [QVBoxLayout](https://doc.qt.io/qt-6/qvboxlayout.html). args Args to pass to [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) constructor kwargs Kwargs to pass to [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) constructor \"\"\" def __init__ ( self , * args , layout = \"vbox\" , ** kwargs ): super () . __init__ ( * args , ** kwargs ) layouts = { \"vbox\" : QVBoxLayout , \"hbox\" : QHBoxLayout , \"grid\" : QGridLayout , \"form\" : QFormLayout } if isinstance ( layout , str ): if layout not in layout : valid = \"' {} ', ' {} ' or ' {} '\" . format ( * layouts . keys ()) msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) layoutObj = layouts [ layout ] self . layout = layoutObj () elif isinstance ( layout , QLayout ): self . layout = layout else : msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) self . setLayout ( self . layout ) def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs ) def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs ) def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs ) addLayout ( * args , ** kwargs ) Add a layout to the internal layout. Source code in customQObjects/widgets/groupbox.py 41 42 43 def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs ) addRow ( * args , ** kwargs ) Add row to a form layout Source code in customQObjects/widgets/groupbox.py 45 46 47 48 49 def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs ) addWidget ( * args , ** kwargs ) Add a widget to the internal layout. Source code in customQObjects/widgets/groupbox.py 37 38 39 def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs ) HSplitter Bases: Splitter Splitter with horizontal orientation Source code in customQObjects/widgets/splitter.py 30 31 32 33 class HSplitter ( Splitter ): \"\"\" [Splitter][customQObjects.widgets.Splitter] with horizontal orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Horizontal , parent = parent ) SpinBox Bases: QSpinBox QSpinBox that allows min and max to be essentially unset. See Also DoubleSpinBox Source code in customQObjects/widgets/spinbox.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class SpinBox ( QSpinBox ): \"\"\" [QSpinBox](https://doc.qt.io/qt-6/qspinbox.html) that allows min and max to be essentially unset. See Also -------- [DoubleSpinBox][customQObjects.widgets.DoubleSpinBox] \"\"\" def setMinimum ( self , value : int = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value ) def setMaximum ( self , value : int = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value ) def setRange ( self , minimum : int = None , maximum : int = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) setMaximum ( value = None ) Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 21 22 23 24 25 def setMaximum ( self , value : int = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value ) setMinimum ( value = None ) Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 15 16 17 18 19 def setMinimum ( self , value : int = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value ) setRange ( minimum = None , maximum = None ) Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 27 28 29 30 def setRange ( self , minimum : int = None , maximum : int = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum ) Splitter Bases: QSplitter QSplitter with addLayout method See Also VSplitter HSplitter Source code in customQObjects/widgets/splitter.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Splitter ( QSplitter ): \"\"\" [QSplitter](https://doc.qt.io/qt-6/qsplitter.html) with [addLayout][customQObjects.widgets.Splitter.addLayout] method See Also -------- [VSplitter][customQObjects.widgets.VSplitter] [HSplitter][customQObjects.widgets.HSplitter] \"\"\" def addLayout ( self , layout : QLayout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container ) def setStretchFactors ( self , stretch : list [ int ]): \"\"\" Set multiple stretch factors from list \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf ) addLayout ( layout ) Add layout to splitter by creating a container widget for it Source code in customQObjects/widgets/splitter.py 14 15 16 17 18 def addLayout ( self , layout : QLayout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container ) setStretchFactors ( stretch ) Set multiple stretch factors from list Source code in customQObjects/widgets/splitter.py 20 21 22 23 def setStretchFactors ( self , stretch : list [ int ]): \"\"\" Set multiple stretch factors from list \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf ) StackedWidget Bases: QStackedWidget QStackedWidget that stores references to its pages in a dict. Also can pass dict of pages to initialise the stack. Source code in customQObjects/widgets/stackedwidget.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 class StackedWidget ( QStackedWidget ): \"\"\" [QStackedWidget](https://doc.qt.io/qt-6/qstackedwidget.html) that stores references to its pages in a dict. Also can pass dict of `pages` to initialise the stack. \"\"\" def __init__ ( self , * args , pages = {}, ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _widgetDict = {} for key , widget in pages . items (): self . addWidget ( widget , key ) def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" ) @property def widgetDict ( self ) -> dict : \"\"\" Return dictionary of keys and widgets \"\"\" return self . _widgetDict @property def widgets ( self ) -> list [ QWidget ]: \"\"\" Return list of all widgets \"\"\" return [ self . widget ( idx ) for idx in range ( self . count ())] def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget ) def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget ) def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a [QWidget](https://doc.qt.io/qt-6/qwidget.html) instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ] def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ]) widgetDict : dict property Return dictionary of keys and widgets widgets : list [ QWidget ] property Return list of all widgets __getitem__ ( key ) Get widget identified by key Source code in customQObjects/widgets/stackedwidget.py 22 23 24 25 26 27 28 def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" ) addWidget ( widget , key = None ) Add widget to the stack, associated with key key . If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 40 41 42 43 44 45 46 47 48 49 50 51 def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget ) insertWidget ( index , widget , key = None ) Insert widget to the stack, associated with key key , at position index If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 53 54 55 56 57 58 59 60 61 62 63 64 def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget ) keyOf ( widget ) Return key associated with widget . Source code in customQObjects/widgets/stackedwidget.py 77 78 79 80 81 82 def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None removeWidget ( widget ) Remove widget from stack. widget can be a QWidget instance or a key. Source code in customQObjects/widgets/stackedwidget.py 66 67 68 69 70 71 72 73 74 75 def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a [QWidget](https://doc.qt.io/qt-6/qwidget.html) instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ] setCurrentKey ( key ) Set current widget to that identified by key Source code in customQObjects/widgets/stackedwidget.py 84 85 86 def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ]) TableWidget Bases: QTableWidget Source code in customQObjects/widgets/tablewidget.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 class TableWidget ( QTableWidget ): def __init__ ( self , horizontalHeader = None , verticalHeader = None , resizeMode = None ): super () . __init__ () if horizontalHeader is not None : self . setHorizontalHeaderLabels ( self . header ) if verticalHeader is not None : self . setVerticalHeaderLabels ( self . header ) if resizeMode is not None : self . setResizeMode ( resizeMode ) @property def columnCount ( self ): return self . columnCount () @property def rowCount ( self ): return self . rowCount () def _parseRowKwargs ( self , ** kwargs ): names = [ 'background' , 'checkState' , 'data' , 'flags' , 'font' , 'foreground' , 'icon' , 'selected' , 'sizeHint' , 'statusTip' , 'textAlignment' , 'toolTip' , 'whatsThis' ] d = {} for key in names : if key not in kwargs : continue value = kwargs [ key ] if key in [ 'background' , 'foreground' ]: value = makeBrush ( value ) d [ key ] = self . _makeRowArgs ( value ) return d def _makeRowArgs ( self , value ): \"\"\" If `value` is not a list or tuple, create list of `value` repeated `columnCount` times If `value` is a list or tuple of values, it will be returned. \"\"\" if not isinstance ( value , ( list , tuple )): value = [ value ] * self . columnCount if len ( value ) != self . columnCount : msg = f \"List of { self . columnCount } values needed, got { value } \" raise ValueError ( msg ) def addRow ( self , row : list , ** kwargs ): \"\"\" Add row to table Parameters ---------- row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" kwargs = self . _parseRowKwargs ( ** kwargs ) for col , arg in enumerate ( row ): if isinstance ( arg , ( tuple , list )): item = QTableWidgetItem ( * arg ) else : item = QTableWidgetItem ( arg ) for name , values in kwargs . items (): # call setters with corresponding value setattr ( item , f \"set { name . title () } \" , values [ col ]) self . setItem ( self . rowCount , col , item ) def updateRow ( self , idx : int , row : list , ** kwargs ): \"\"\" Update data in row number `idx` Parameters ---------- idx : int Index of row to update row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" for col in self . columnCount : item = self . item ( idx , col ) # update text and icon if isinstance ( row [ col ], ( tuple , list )): icon , text = row [ col ] item . setIcon ( icon ) else : text = row [ col ] item . setText ( text ) # update any other properties for name , values in kwargs . items (): setattr ( item , f \"set { name . title () } \" , values [ col ]) def rowData ( self , idx ): pass def columnData ( self , name ): pass def rowWhere ( self , columnName , value , returnType = 'dict' ): pass def setResizeMode ( self , mode ): \"\"\" Set resize mode for horizontal header Parameters ---------- mode : {list, QHeaderView.ResizeMode, str} Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be [QHeaderView.ResizeMode](https://doc.qt.io/qt-6/qheaderview.html#ResizeMode-enum) or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive). \"\"\" error_msg = ( \"TableWidget resizeMode should be 'Interactive', 'Fixed', \" f \"'Stretch' or 'ResizeToContents', not ' { mode } '\" ) modes = { 'interactive' : QHeaderView . Interactive , 'fixed' : QHeaderView . Fixed , 'stretch' : QHeaderView . Stretch , 'resizetocontents' : QHeaderView . ResizeToContents } if isinstance ( mode , str ): mode = modes . get ( mode . lower (), None ) if mode is None : raise ValueError ( error_msg ) if mode not in modes . values (): raise ValueError ( error_msg ) headerView = self . horizontalHeader () mode = self . _makeRowArgs ( mode ) for idx , m in enumerate ( mode ): headerView . setSectionResizeMode ( idx , m ) addRow ( row , ** kwargs ) Add row to table Parameters: Name Type Description Default row list , tuple Sequence of strings or (icon,string) pairs from which to construct QTableWidgetItems required kwargs Any QTableWidgetItem setter can be passed here, e.g. toolTip='this is the tool tip' will call setToolTip('this is the tool tip') after creating the item. background and foreground can be passed with a QBrush , QColor or any valid QColor arg. {} Source code in customQObjects/widgets/tablewidget.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def addRow ( self , row : list , ** kwargs ): \"\"\" Add row to table Parameters ---------- row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" kwargs = self . _parseRowKwargs ( ** kwargs ) for col , arg in enumerate ( row ): if isinstance ( arg , ( tuple , list )): item = QTableWidgetItem ( * arg ) else : item = QTableWidgetItem ( arg ) for name , values in kwargs . items (): # call setters with corresponding value setattr ( item , f \"set { name . title () } \" , values [ col ]) self . setItem ( self . rowCount , col , item ) setResizeMode ( mode ) Set resize mode for horizontal header Parameters: Name Type Description Default mode Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be QHeaderView.ResizeMode or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive). list Source code in customQObjects/widgets/tablewidget.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def setResizeMode ( self , mode ): \"\"\" Set resize mode for horizontal header Parameters ---------- mode : {list, QHeaderView.ResizeMode, str} Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be [QHeaderView.ResizeMode](https://doc.qt.io/qt-6/qheaderview.html#ResizeMode-enum) or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive). \"\"\" error_msg = ( \"TableWidget resizeMode should be 'Interactive', 'Fixed', \" f \"'Stretch' or 'ResizeToContents', not ' { mode } '\" ) modes = { 'interactive' : QHeaderView . Interactive , 'fixed' : QHeaderView . Fixed , 'stretch' : QHeaderView . Stretch , 'resizetocontents' : QHeaderView . ResizeToContents } if isinstance ( mode , str ): mode = modes . get ( mode . lower (), None ) if mode is None : raise ValueError ( error_msg ) if mode not in modes . values (): raise ValueError ( error_msg ) headerView = self . horizontalHeader () mode = self . _makeRowArgs ( mode ) for idx , m in enumerate ( mode ): headerView . setSectionResizeMode ( idx , m ) updateRow ( idx , row , ** kwargs ) Update data in row number idx Parameters: Name Type Description Default idx int Index of row to update required row list , tuple Sequence of strings or (icon,string) pairs from which to construct QTableWidgetItems required kwargs Any QTableWidgetItem setter can be passed here, e.g. toolTip='this is the tool tip' will call setToolTip('this is the tool tip') after creating the item. background and foreground can be passed with a QBrush , QColor or any valid QColor arg. {} Source code in customQObjects/widgets/tablewidget.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def updateRow ( self , idx : int , row : list , ** kwargs ): \"\"\" Update data in row number `idx` Parameters ---------- idx : int Index of row to update row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" for col in self . columnCount : item = self . item ( idx , col ) # update text and icon if isinstance ( row [ col ], ( tuple , list )): icon , text = row [ col ] item . setIcon ( icon ) else : text = row [ col ] item . setText ( text ) # update any other properties for name , values in kwargs . items (): setattr ( item , f \"set { name . title () } \" , values [ col ]) TimerDialog Bases: QDialog QDialog that will timeout after a given number of milliseconds. Parameters: Name Type Description Default timeout int Number of milliseconds for the dialog to be shown. Default is 3000. 3000 Source code in customQObjects/widgets/timerdialog.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class TimerDialog ( QDialog ): \"\"\" [QDialog](https://doc.qt.io/qt-5/qdialog.html) that will timeout after a given number of milliseconds. Parameters ---------- timeout : int Number of milliseconds for the dialog to be shown. Default is 3000. \"\"\" def __init__ ( self , timeout = 3000 ): super () . __init__ () self . timer = QTimer () self . timer . setInterval ( timeout ) self . timer . setSingleShot ( True ) self . timer . timeout . connect ( self . accept ) def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs ) exec_ ( * args , ** kwargs ) Show the dialog and start the timer. Source code in customQObjects/widgets/timerdialog.py 20 21 22 23 def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs ) VSplitter Bases: Splitter Splitter with vertical orientation Source code in customQObjects/widgets/splitter.py 25 26 27 28 class VSplitter ( Splitter ): \"\"\" [Splitter][customQObjects.widgets.Splitter] with vertical orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Vertical , parent = parent )","title":"Widgets"},{"location":"widgets/#widgets","text":"","title":"Widgets"},{"location":"widgets/#customQObjects.widgets.ClickMixin","text":"Bases: object Emit a clicked signal in mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 8 9 10 11 12 13 14 15 16 17 class ClickMixin ( object ): \"\"\" Emit a `clicked` signal in [mouseReleaseEvent][customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent] \"\"\" clicked = Signal () \"\"\" Signal emitted in [mouseReleaseEvent][customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent] \"\"\" def mouseReleaseEvent ( self , event ): \"\"\" Emit [clicked][customQObjects.widgets.simplemixins.ClickMixin.clicked] signal and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event )","title":"ClickMixin"},{"location":"widgets/#customQObjects.widgets.simplemixins.ClickMixin.clicked","text":"Signal emitted in mouseReleaseEvent","title":"clicked"},{"location":"widgets/#customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent","text":"Emit clicked signal and call super().mouseReleaseEvent Source code in customQObjects/widgets/simplemixins.py 14 15 16 17 def mouseReleaseEvent ( self , event ): \"\"\" Emit [clicked][customQObjects.widgets.simplemixins.ClickMixin.clicked] signal and call `super().mouseReleaseEvent` \"\"\" self . clicked . emit () return super () . mouseReleaseEvent ( event )","title":"mouseReleaseEvent()"},{"location":"widgets/#customQObjects.widgets.ComboBox","text":"Bases: QComboBox QComboBox with items property and ability to automatically create item model. Parameters: Name Type Description Default values list [ NamedTuple ], optional If provided, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' is displayed as text and 'value' is returned by value . If not provided, value will return the current text. None model QAbstractListModel , optional Model to use. If not provided, a model is created that returns the 'name' and 'value' from the values list when asked for the Qt.DisplayRole and Qt.UserRole respectively None args QComboBox args () kwargs QComboBox kwargs {} Source code in customQObjects/widgets/combobox.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 class ComboBox ( QComboBox ): \"\"\" [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) with [items][customQObjects.widgets.ComboBox.items] property and ability to automatically create item model. Parameters ---------- values : list[NamedTuple], optional If provided, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' is displayed as text and 'value' is returned by [value][customQObjects.widgets.combobox.ComboBox.value]. If not provided, [value][customQObjects.widgets.combobox.ComboBox.value] will return the current text. model : QAbstractListModel, optional Model to use. If not provided, a model is created that returns the 'name' and 'value' from the `values` list when asked for the [Qt.DisplayRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum) and [Qt.UserRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum) respectively args : [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) args kwargs : [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) kwargs \"\"\" def __init__ ( self , * args , values : list [ NamedTuple ] = None , model = None , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if model is None : model = ComboBoxModel if values is not None : mdl = model ( values ) self . setModel ( mdl ) self . _values = values @property def items ( self ): \"\"\" Return list of text from all items. \"\"\" return [ self . itemText ( idx ) for idx in range ( self . count ())] @property def value ( self ): \"\"\" Return current value \"\"\" if self . _values is None : return self . currentText () else : return self . itemData ( self . currentIndex (), Qt . UserRole )","title":"ComboBox"},{"location":"widgets/#customQObjects.widgets.combobox.ComboBox.items","text":"Return list of text from all items.","title":"items"},{"location":"widgets/#customQObjects.widgets.combobox.ComboBox.value","text":"Return current value","title":"value"},{"location":"widgets/#customQObjects.widgets.DoubleSpinBox","text":"Bases: QDoubleSpinBox QDoubleSpinBox that allows min and max to be essentially unset.","title":"DoubleSpinBox"},{"location":"widgets/#customQObjects.widgets.DoubleSpinBox--see-also","text":"SpinBox Source code in customQObjects/widgets/spinbox.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class DoubleSpinBox ( QDoubleSpinBox ): \"\"\" [QDoubleSpinBox](https://doc.qt.io/qt-6/qsdoublepinbox.html) that allows min and max to be essentially unset. See Also -------- [SpinBox][customQObjects.widgets.SpinBox] \"\"\" def setMinimum ( self , value : float = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value ) def setMaximum ( self , value : float = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value ) def setRange ( self , minimum : float = None , maximum : float = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"See Also"},{"location":"widgets/#customQObjects.widgets.spinbox.DoubleSpinBox.setMaximum","text":"Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 46 47 48 49 50 def setMaximum ( self , value : float = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = sys . float_info . max return super () . setMaximum ( value )","title":"setMaximum()"},{"location":"widgets/#customQObjects.widgets.spinbox.DoubleSpinBox.setMinimum","text":"Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 40 41 42 43 44 def setMinimum ( self , value : float = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - sys . float_info . max return super () . setMinimum ( value )","title":"setMinimum()"},{"location":"widgets/#customQObjects.widgets.spinbox.DoubleSpinBox.setRange","text":"Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 52 53 54 55 def setRange ( self , minimum : float = None , maximum : float = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"setRange()"},{"location":"widgets/#customQObjects.widgets.ElideLabel","text":"Bases: ElideMixin , QLabel QLabel that automatically elides its text. See ElideMixin for additional args and kwargs. Source code in customQObjects/widgets/elidemixin.py 91 92 93 94 95 96 97 98 99 class ElideLabel ( ElideMixin , QLabel ): \"\"\" [QLabel](https://doc.qt.io/qt-5/qlabel.html) that automatically elides its text. See [ElideMixin][customQObjects.widgets.ElideMixin] for additional args and kwargs. \"\"\" def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) if len ( args ) == 1 : self . setText ( args [ 0 ])","title":"ElideLabel"},{"location":"widgets/#customQObjects.widgets.ElideMixin","text":"Bases: object Mixin providing functionality to automatically elide text Parameters: Name Type Description Default elideMode Text elide mode, either as string or Qt.TextElideMode 'middle' widthAdjust int , optional If provided, this value will be added to the widget's width when calling QFontMetrics.elidedText 0 Source code in customQObjects/widgets/elidemixin.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class ElideMixin ( object ): \"\"\" Mixin providing functionality to automatically elide text Parameters ---------- elideMode : {'middle', 'left', 'right', 'None', Qt.TextElideMode} Text elide mode, either as string or [Qt.TextElideMode](https://doc.qt.io/qt-6/qt.html#TextElideMode-enum>) widthAdjust : int, optional If provided, this value will be added to the widget's width when calling [QFontMetrics.elidedText](https://doc.qt.io/qt-6/qfontmetrics.html#elidedText) \"\"\" elideModes = { 'left' : Qt . ElideLeft , 'middle' : Qt . ElideMiddle , 'right' : Qt . ElideRight , 'none' : Qt . ElideNone } def __init__ ( self , * args , elideMode = 'middle' , widthAdjust = 0 , ** kwargs ): self . _fullText = \"\" self . _widthAdjust = widthAdjust self . _elideMode = self . _validateMode ( elideMode ) super () . __init__ ( * args , ** kwargs ) @property def fullText ( self ): \"\"\" Un-elided text \"\"\" return self . _fullText @property def elideMode ( self ): \"\"\" Current elide mode \"\"\" return self . _elideMode @elideMode . setter def elideMode ( self , mode ): \"\"\" Set elide mode and update text \"\"\" self . _elideMode = self . _validateMode ( mode ) self . _resetText () @property def widthAdjust ( self ): \"\"\" Current width adjust \"\"\" return self . _widthAdjust @widthAdjust . setter def widthAdjust ( self , value ): \"\"\" Set width adjust and update text \"\"\" self . _widthAdjust = value self . _resetText () def _validateMode ( self , mode ): \"\"\" Return requested Qt.TextElideMode \"\"\" if mode is None : mode = 'none' if isinstance ( mode , str ): mode = mode . lower () if mode not in self . elideModes : raise ValueError ( f \"' { mode } ' not valid elide mode\" ) else : mode = self . elideModes [ mode ] else : if mode not in self . elideModes . values (): raise ValueError ( f \"' { mode } ' not valid elide mode\" ) return mode def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText ) def _resetText ( self ): \"\"\" Reset text from :attr:`fullText` \"\"\" self . setText ( self . _fullText ) def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText ()","title":"ElideMixin"},{"location":"widgets/#customQObjects.widgets.elidemixin.ElideMixin.elideMode","text":"Current elide mode","title":"elideMode"},{"location":"widgets/#customQObjects.widgets.elidemixin.ElideMixin.fullText","text":"Un-elided text","title":"fullText"},{"location":"widgets/#customQObjects.widgets.elidemixin.ElideMixin.widthAdjust","text":"Current width adjust","title":"widthAdjust"},{"location":"widgets/#customQObjects.widgets.elidemixin.ElideMixin.resizeEvent","text":"Override resizeEvent to update text Source code in customQObjects/widgets/elidemixin.py 87 88 89 def resizeEvent ( self , event ): \"\"\" Override resizeEvent to update text \"\"\" self . _resetText ()","title":"resizeEvent()"},{"location":"widgets/#customQObjects.widgets.elidemixin.ElideMixin.setText","text":"Elide text and set it Source code in customQObjects/widgets/elidemixin.py 75 76 77 78 79 80 81 def setText ( self , text ): \"\"\" Elide `text` and set it \"\"\" self . _fullText = text metrics = QFontMetrics ( self . font ()) elided = metrics . elidedText ( text , self . elideMode , self . width () + self . widthAdjust ) super () . setText ( elided ) self . setToolTip ( self . _fullText )","title":"setText()"},{"location":"widgets/#customQObjects.widgets.GroupBox","text":"Bases: QGroupBox QGroupBox with a layout automatically set. Parameters: Name Type Description Default layout Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e. QVBoxLayout . \"vbox\" args Args to pass to QGroupBox constructor () kwargs Kwargs to pass to QGroupBox constructor {} Source code in customQObjects/widgets/groupbox.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class GroupBox ( QGroupBox ): \"\"\" [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) with a layout automatically set. Parameters ---------- layout : {\"vbox\", \"hbox\", \"grid\", \"form\", QLayout} Type of layout to create. If given a [QLayout](https://doc.qt.io/qt-6/qlayout.html) instance, that will be used. Default is \"vbox\", i.e. [QVBoxLayout](https://doc.qt.io/qt-6/qvboxlayout.html). args Args to pass to [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) constructor kwargs Kwargs to pass to [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) constructor \"\"\" def __init__ ( self , * args , layout = \"vbox\" , ** kwargs ): super () . __init__ ( * args , ** kwargs ) layouts = { \"vbox\" : QVBoxLayout , \"hbox\" : QHBoxLayout , \"grid\" : QGridLayout , \"form\" : QFormLayout } if isinstance ( layout , str ): if layout not in layout : valid = \"' {} ', ' {} ' or ' {} '\" . format ( * layouts . keys ()) msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) layoutObj = layouts [ layout ] self . layout = layoutObj () elif isinstance ( layout , QLayout ): self . layout = layout else : msg = f \"GroupBox direction should be { valid } or a QLayout instance, not ' { layout } '\" raise ValueError ( msg ) self . setLayout ( self . layout ) def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs ) def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs ) def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs )","title":"GroupBox"},{"location":"widgets/#customQObjects.widgets.groupbox.GroupBox.addLayout","text":"Add a layout to the internal layout. Source code in customQObjects/widgets/groupbox.py 41 42 43 def addLayout ( self , * args , ** kwargs ): \"\"\" Add a layout to the internal layout. \"\"\" return self . layout . addLayout ( * args , ** kwargs )","title":"addLayout()"},{"location":"widgets/#customQObjects.widgets.groupbox.GroupBox.addRow","text":"Add row to a form layout Source code in customQObjects/widgets/groupbox.py 45 46 47 48 49 def addRow ( self , * args , ** kwargs ): \"\"\" Add row to a form layout \"\"\" if not isinstance ( self . layout , QFormLayout ): raise RuntimeError ( f \"'addRow' method only exists for QFormLayouts, not { self . layout . __class__ } \" ) return self . layout . addRow ( * args , ** kwargs )","title":"addRow()"},{"location":"widgets/#customQObjects.widgets.groupbox.GroupBox.addWidget","text":"Add a widget to the internal layout. Source code in customQObjects/widgets/groupbox.py 37 38 39 def addWidget ( self , * args , ** kwargs ): \"\"\" Add a widget to the internal layout. \"\"\" return self . layout . addWidget ( * args , ** kwargs )","title":"addWidget()"},{"location":"widgets/#customQObjects.widgets.HSplitter","text":"Bases: Splitter Splitter with horizontal orientation Source code in customQObjects/widgets/splitter.py 30 31 32 33 class HSplitter ( Splitter ): \"\"\" [Splitter][customQObjects.widgets.Splitter] with horizontal orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Horizontal , parent = parent )","title":"HSplitter"},{"location":"widgets/#customQObjects.widgets.SpinBox","text":"Bases: QSpinBox QSpinBox that allows min and max to be essentially unset.","title":"SpinBox"},{"location":"widgets/#customQObjects.widgets.SpinBox--see-also","text":"DoubleSpinBox Source code in customQObjects/widgets/spinbox.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class SpinBox ( QSpinBox ): \"\"\" [QSpinBox](https://doc.qt.io/qt-6/qspinbox.html) that allows min and max to be essentially unset. See Also -------- [DoubleSpinBox][customQObjects.widgets.DoubleSpinBox] \"\"\" def setMinimum ( self , value : int = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value ) def setMaximum ( self , value : int = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value ) def setRange ( self , minimum : int = None , maximum : int = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"See Also"},{"location":"widgets/#customQObjects.widgets.spinbox.SpinBox.setMaximum","text":"Set maximum value. If None , there will be no maximum Source code in customQObjects/widgets/spinbox.py 21 22 23 24 25 def setMaximum ( self , value : int = None ): \"\"\" Set maximum value. If `None`, there will be no maximum \"\"\" if value is None : value = 2147483647 return super () . setMaximum ( value )","title":"setMaximum()"},{"location":"widgets/#customQObjects.widgets.spinbox.SpinBox.setMinimum","text":"Set minimum value. If None , there will be no minimum Source code in customQObjects/widgets/spinbox.py 15 16 17 18 19 def setMinimum ( self , value : int = None ): \"\"\" Set minimum value. If `None`, there will be no minimum \"\"\" if value is None : value = - 2147483648 return super () . setMinimum ( value )","title":"setMinimum()"},{"location":"widgets/#customQObjects.widgets.spinbox.SpinBox.setRange","text":"Set minimum and/or maximum Source code in customQObjects/widgets/spinbox.py 27 28 29 30 def setRange ( self , minimum : int = None , maximum : int = None ): \"\"\" Set minimum and/or maximum \"\"\" self . setMinimum ( minimum ) self . setMaximum ( maximum )","title":"setRange()"},{"location":"widgets/#customQObjects.widgets.Splitter","text":"Bases: QSplitter QSplitter with addLayout method","title":"Splitter"},{"location":"widgets/#customQObjects.widgets.Splitter--see-also","text":"VSplitter HSplitter Source code in customQObjects/widgets/splitter.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Splitter ( QSplitter ): \"\"\" [QSplitter](https://doc.qt.io/qt-6/qsplitter.html) with [addLayout][customQObjects.widgets.Splitter.addLayout] method See Also -------- [VSplitter][customQObjects.widgets.VSplitter] [HSplitter][customQObjects.widgets.HSplitter] \"\"\" def addLayout ( self , layout : QLayout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container ) def setStretchFactors ( self , stretch : list [ int ]): \"\"\" Set multiple stretch factors from list \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf )","title":"See Also"},{"location":"widgets/#customQObjects.widgets.splitter.Splitter.addLayout","text":"Add layout to splitter by creating a container widget for it Source code in customQObjects/widgets/splitter.py 14 15 16 17 18 def addLayout ( self , layout : QLayout ): \"\"\" Add `layout` to splitter by creating a container widget for it \"\"\" container = QWidget () container . setLayout ( layout ) self . addWidget ( container )","title":"addLayout()"},{"location":"widgets/#customQObjects.widgets.splitter.Splitter.setStretchFactors","text":"Set multiple stretch factors from list Source code in customQObjects/widgets/splitter.py 20 21 22 23 def setStretchFactors ( self , stretch : list [ int ]): \"\"\" Set multiple stretch factors from list \"\"\" for idx , sf in enumerate ( stretch ): self . setStretchFactor ( idx , sf )","title":"setStretchFactors()"},{"location":"widgets/#customQObjects.widgets.StackedWidget","text":"Bases: QStackedWidget QStackedWidget that stores references to its pages in a dict. Also can pass dict of pages to initialise the stack. Source code in customQObjects/widgets/stackedwidget.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 class StackedWidget ( QStackedWidget ): \"\"\" [QStackedWidget](https://doc.qt.io/qt-6/qstackedwidget.html) that stores references to its pages in a dict. Also can pass dict of `pages` to initialise the stack. \"\"\" def __init__ ( self , * args , pages = {}, ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _widgetDict = {} for key , widget in pages . items (): self . addWidget ( widget , key ) def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" ) @property def widgetDict ( self ) -> dict : \"\"\" Return dictionary of keys and widgets \"\"\" return self . _widgetDict @property def widgets ( self ) -> list [ QWidget ]: \"\"\" Return list of all widgets \"\"\" return [ self . widget ( idx ) for idx in range ( self . count ())] def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget ) def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget ) def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a [QWidget](https://doc.qt.io/qt-6/qwidget.html) instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ] def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ])","title":"StackedWidget"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.widgetDict","text":"Return dictionary of keys and widgets","title":"widgetDict"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.widgets","text":"Return list of all widgets","title":"widgets"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.__getitem__","text":"Get widget identified by key Source code in customQObjects/widgets/stackedwidget.py 22 23 24 25 26 27 28 def __getitem__ ( self , key ): \"\"\" Get widget identified by `key` \"\"\" widget = self . _widgetDict . get ( key , None ) if widget is not None : return widget else : raise KeyError ( f \"StackedWidget has no widget ' { key } '\" )","title":"__getitem__()"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.addWidget","text":"Add widget to the stack, associated with key key . If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 40 41 42 43 44 45 46 47 48 49 50 51 def addWidget ( self , widget , key = None ) -> int : \"\"\" Add `widget` to the stack, associated with key `key`. If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . addWidget ( widget )","title":"addWidget()"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.insertWidget","text":"Insert widget to the stack, associated with key key , at position index If key not provided a uuid will be generated. Source code in customQObjects/widgets/stackedwidget.py 53 54 55 56 57 58 59 60 61 62 63 64 def insertWidget ( self , index , widget , key = None ) -> int : \"\"\" Insert `widget` to the stack, associated with key `key`, at position `index` If `key` not provided a uuid will be generated. \"\"\" if key is None : key = uuid4 () if key in self . _widgetDict : raise KeyError ( f \"Key ' { key } ' already present in StackedWidget\" ) self . _widgetDict [ key ] = widget return super () . insertWidget ( index , widget )","title":"insertWidget()"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.keyOf","text":"Return key associated with widget . Source code in customQObjects/widgets/stackedwidget.py 77 78 79 80 81 82 def keyOf ( self , widget ): \"\"\" Return key associated with `widget`. \"\"\" for key , value in self . _widgetDict . items (): if value == widget : return key return None","title":"keyOf()"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.removeWidget","text":"Remove widget from stack. widget can be a QWidget instance or a key. Source code in customQObjects/widgets/stackedwidget.py 66 67 68 69 70 71 72 73 74 75 def removeWidget ( self , widget ): \"\"\" Remove `widget` from stack. `widget` can be a [QWidget](https://doc.qt.io/qt-6/qwidget.html) instance or a key. \"\"\" if widget in self . _widgetDict : widget = self . _widgetDict [ widget ] super () . removeWidget ( widget ) del self . _widgetDict [ widget ]","title":"removeWidget()"},{"location":"widgets/#customQObjects.widgets.stackedwidget.StackedWidget.setCurrentKey","text":"Set current widget to that identified by key Source code in customQObjects/widgets/stackedwidget.py 84 85 86 def setCurrentKey ( self , key ): \"\"\" Set current widget to that identified by `key` \"\"\" self . setCurrentWidget ( self . _widgetDict [ key ])","title":"setCurrentKey()"},{"location":"widgets/#customQObjects.widgets.TableWidget","text":"Bases: QTableWidget Source code in customQObjects/widgets/tablewidget.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 class TableWidget ( QTableWidget ): def __init__ ( self , horizontalHeader = None , verticalHeader = None , resizeMode = None ): super () . __init__ () if horizontalHeader is not None : self . setHorizontalHeaderLabels ( self . header ) if verticalHeader is not None : self . setVerticalHeaderLabels ( self . header ) if resizeMode is not None : self . setResizeMode ( resizeMode ) @property def columnCount ( self ): return self . columnCount () @property def rowCount ( self ): return self . rowCount () def _parseRowKwargs ( self , ** kwargs ): names = [ 'background' , 'checkState' , 'data' , 'flags' , 'font' , 'foreground' , 'icon' , 'selected' , 'sizeHint' , 'statusTip' , 'textAlignment' , 'toolTip' , 'whatsThis' ] d = {} for key in names : if key not in kwargs : continue value = kwargs [ key ] if key in [ 'background' , 'foreground' ]: value = makeBrush ( value ) d [ key ] = self . _makeRowArgs ( value ) return d def _makeRowArgs ( self , value ): \"\"\" If `value` is not a list or tuple, create list of `value` repeated `columnCount` times If `value` is a list or tuple of values, it will be returned. \"\"\" if not isinstance ( value , ( list , tuple )): value = [ value ] * self . columnCount if len ( value ) != self . columnCount : msg = f \"List of { self . columnCount } values needed, got { value } \" raise ValueError ( msg ) def addRow ( self , row : list , ** kwargs ): \"\"\" Add row to table Parameters ---------- row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" kwargs = self . _parseRowKwargs ( ** kwargs ) for col , arg in enumerate ( row ): if isinstance ( arg , ( tuple , list )): item = QTableWidgetItem ( * arg ) else : item = QTableWidgetItem ( arg ) for name , values in kwargs . items (): # call setters with corresponding value setattr ( item , f \"set { name . title () } \" , values [ col ]) self . setItem ( self . rowCount , col , item ) def updateRow ( self , idx : int , row : list , ** kwargs ): \"\"\" Update data in row number `idx` Parameters ---------- idx : int Index of row to update row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" for col in self . columnCount : item = self . item ( idx , col ) # update text and icon if isinstance ( row [ col ], ( tuple , list )): icon , text = row [ col ] item . setIcon ( icon ) else : text = row [ col ] item . setText ( text ) # update any other properties for name , values in kwargs . items (): setattr ( item , f \"set { name . title () } \" , values [ col ]) def rowData ( self , idx ): pass def columnData ( self , name ): pass def rowWhere ( self , columnName , value , returnType = 'dict' ): pass def setResizeMode ( self , mode ): \"\"\" Set resize mode for horizontal header Parameters ---------- mode : {list, QHeaderView.ResizeMode, str} Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be [QHeaderView.ResizeMode](https://doc.qt.io/qt-6/qheaderview.html#ResizeMode-enum) or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive). \"\"\" error_msg = ( \"TableWidget resizeMode should be 'Interactive', 'Fixed', \" f \"'Stretch' or 'ResizeToContents', not ' { mode } '\" ) modes = { 'interactive' : QHeaderView . Interactive , 'fixed' : QHeaderView . Fixed , 'stretch' : QHeaderView . Stretch , 'resizetocontents' : QHeaderView . ResizeToContents } if isinstance ( mode , str ): mode = modes . get ( mode . lower (), None ) if mode is None : raise ValueError ( error_msg ) if mode not in modes . values (): raise ValueError ( error_msg ) headerView = self . horizontalHeader () mode = self . _makeRowArgs ( mode ) for idx , m in enumerate ( mode ): headerView . setSectionResizeMode ( idx , m )","title":"TableWidget"},{"location":"widgets/#customQObjects.widgets.tablewidget.TableWidget.addRow","text":"Add row to table Parameters: Name Type Description Default row list , tuple Sequence of strings or (icon,string) pairs from which to construct QTableWidgetItems required kwargs Any QTableWidgetItem setter can be passed here, e.g. toolTip='this is the tool tip' will call setToolTip('this is the tool tip') after creating the item. background and foreground can be passed with a QBrush , QColor or any valid QColor arg. {} Source code in customQObjects/widgets/tablewidget.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def addRow ( self , row : list , ** kwargs ): \"\"\" Add row to table Parameters ---------- row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" kwargs = self . _parseRowKwargs ( ** kwargs ) for col , arg in enumerate ( row ): if isinstance ( arg , ( tuple , list )): item = QTableWidgetItem ( * arg ) else : item = QTableWidgetItem ( arg ) for name , values in kwargs . items (): # call setters with corresponding value setattr ( item , f \"set { name . title () } \" , values [ col ]) self . setItem ( self . rowCount , col , item )","title":"addRow()"},{"location":"widgets/#customQObjects.widgets.tablewidget.TableWidget.setResizeMode","text":"Set resize mode for horizontal header Parameters: Name Type Description Default mode Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be QHeaderView.ResizeMode or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive). list Source code in customQObjects/widgets/tablewidget.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def setResizeMode ( self , mode ): \"\"\" Set resize mode for horizontal header Parameters ---------- mode : {list, QHeaderView.ResizeMode, str} Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be [QHeaderView.ResizeMode](https://doc.qt.io/qt-6/qheaderview.html#ResizeMode-enum) or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive). \"\"\" error_msg = ( \"TableWidget resizeMode should be 'Interactive', 'Fixed', \" f \"'Stretch' or 'ResizeToContents', not ' { mode } '\" ) modes = { 'interactive' : QHeaderView . Interactive , 'fixed' : QHeaderView . Fixed , 'stretch' : QHeaderView . Stretch , 'resizetocontents' : QHeaderView . ResizeToContents } if isinstance ( mode , str ): mode = modes . get ( mode . lower (), None ) if mode is None : raise ValueError ( error_msg ) if mode not in modes . values (): raise ValueError ( error_msg ) headerView = self . horizontalHeader () mode = self . _makeRowArgs ( mode ) for idx , m in enumerate ( mode ): headerView . setSectionResizeMode ( idx , m )","title":"setResizeMode()"},{"location":"widgets/#customQObjects.widgets.tablewidget.TableWidget.updateRow","text":"Update data in row number idx Parameters: Name Type Description Default idx int Index of row to update required row list , tuple Sequence of strings or (icon,string) pairs from which to construct QTableWidgetItems required kwargs Any QTableWidgetItem setter can be passed here, e.g. toolTip='this is the tool tip' will call setToolTip('this is the tool tip') after creating the item. background and foreground can be passed with a QBrush , QColor or any valid QColor arg. {} Source code in customQObjects/widgets/tablewidget.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def updateRow ( self , idx : int , row : list , ** kwargs ): \"\"\" Update data in row number `idx` Parameters ---------- idx : int Index of row to update row : list, tuple Sequence of strings or (icon,string) pairs from which to construct [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html) kwargs Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'` will call `setToolTip('this is the tool tip')` after creating the item. `background` and `foreground` can be passed with a [QBrush](https://doc.qt.io/qt-6/qbrush.html), [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg. \"\"\" for col in self . columnCount : item = self . item ( idx , col ) # update text and icon if isinstance ( row [ col ], ( tuple , list )): icon , text = row [ col ] item . setIcon ( icon ) else : text = row [ col ] item . setText ( text ) # update any other properties for name , values in kwargs . items (): setattr ( item , f \"set { name . title () } \" , values [ col ])","title":"updateRow()"},{"location":"widgets/#customQObjects.widgets.TimerDialog","text":"Bases: QDialog QDialog that will timeout after a given number of milliseconds. Parameters: Name Type Description Default timeout int Number of milliseconds for the dialog to be shown. Default is 3000. 3000 Source code in customQObjects/widgets/timerdialog.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class TimerDialog ( QDialog ): \"\"\" [QDialog](https://doc.qt.io/qt-5/qdialog.html) that will timeout after a given number of milliseconds. Parameters ---------- timeout : int Number of milliseconds for the dialog to be shown. Default is 3000. \"\"\" def __init__ ( self , timeout = 3000 ): super () . __init__ () self . timer = QTimer () self . timer . setInterval ( timeout ) self . timer . setSingleShot ( True ) self . timer . timeout . connect ( self . accept ) def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs )","title":"TimerDialog"},{"location":"widgets/#customQObjects.widgets.timerdialog.TimerDialog.exec_","text":"Show the dialog and start the timer. Source code in customQObjects/widgets/timerdialog.py 20 21 22 23 def exec_ ( self , * args , ** kwargs ): \"\"\" Show the dialog and start the timer. \"\"\" self . timer . start () super () . exec_ ( * args , ** kwargs )","title":"exec_()"},{"location":"widgets/#customQObjects.widgets.VSplitter","text":"Bases: Splitter Splitter with vertical orientation Source code in customQObjects/widgets/splitter.py 25 26 27 28 class VSplitter ( Splitter ): \"\"\" [Splitter][customQObjects.widgets.Splitter] with vertical orientation \"\"\" def __init__ ( self , parent = None ): super () . __init__ ( Qt . Vertical , parent = parent )","title":"VSplitter"}]}