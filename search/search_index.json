{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CustomQObjects API","text":"<p>Some convenience classes for PyQt/PySide. CustomQObjects uses qtypy,  so should work with any up-to-date PyQt/PySide installation.</p> <p>Contents: </p> <ul> <li>QtWidgets</li> <li>QtCore</li> <li>QtGui</li> </ul>"},{"location":"core/","title":"Core","text":""},{"location":"core/#core","title":"Core","text":""},{"location":"core/#customQObjects.core.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>QSettings</code></p> <p>QSettings subclass that provides value method that will cast \"true\" and \"false\" to True or False, or will cast the returned value to the given type.</p> Source code in <code>customQObjects/core/settings.py</code> <pre><code>class Settings(QSettings):\n    \"\"\"\n    [QSettings](https://doc.qt.io/qt-6/qsettings.html) subclass that provides\n    [value][customQObjects.core.Settings.value] method that will cast\n    \"true\" and \"false\" to True or False, or will cast the returned value to\n    the given type.\n    \"\"\"\n\n    def value(self, key, defaultValue=None, cast=None):\n        \"\"\"\n        Get value from settings. If value is \"true\" or \"false\", return True or False.\n\n        Parameters\n        ----------\n        key : str\n            Setting to be returned\n        defaultValue : object, optional\n            If `key` is not in the settings, return `defaultValue`. Default\n            is None\n        cast : type, optional\n            If provided (and if possible), cast the value to the given type.\n        \"\"\"\n        v = super().value(key, defaultValue=defaultValue)\n        if v == \"true\":\n            v = True\n        elif v == \"false\":\n            v = False\n        elif cast is not None:\n            try:\n                v = cast(v)\n            except TypeError:\n                pass\n        return v\n</code></pre>"},{"location":"core/#customQObjects.core.Settings.value","title":"<code>value(key, defaultValue=None, cast=None)</code>","text":"<p>Get value from settings. If value is \"true\" or \"false\", return True or False.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Setting to be returned</p> required <code>defaultValue</code> <code>object</code> <p>If <code>key</code> is not in the settings, return <code>defaultValue</code>. Default is None</p> <code>None</code> <code>cast</code> <code>type</code> <p>If provided (and if possible), cast the value to the given type.</p> <code>None</code> Source code in <code>customQObjects/core/settings.py</code> <pre><code>def value(self, key, defaultValue=None, cast=None):\n    \"\"\"\n    Get value from settings. If value is \"true\" or \"false\", return True or False.\n\n    Parameters\n    ----------\n    key : str\n        Setting to be returned\n    defaultValue : object, optional\n        If `key` is not in the settings, return `defaultValue`. Default\n        is None\n    cast : type, optional\n        If provided (and if possible), cast the value to the given type.\n    \"\"\"\n    v = super().value(key, defaultValue=defaultValue)\n    if v == \"true\":\n        v = True\n    elif v == \"false\":\n        v = False\n    elif cast is not None:\n        try:\n            v = cast(v)\n        except TypeError:\n            pass\n    return v\n</code></pre>"},{"location":"core/#customQObjects.core.WrapSignalsMeta","title":"<code>WrapSignalsMeta</code>","text":"<p>               Bases: <code>type(QObject)</code>, <code>type</code></p> <p>Metaclass for any container widget (e.g. StackedWidget).</p> <p>Using <code>WrapSignalsMeta</code> as the metaclass automatically wraps given signals from the widgets contained within.</p> <p>All the contained widgets should be of the same type; pass this type to <code>widget_class</code> and a list of strings of signal names <code>wrap_signals</code>. The signature of the signals is found from the <code>widget_class</code>.</p> <p>If a <code>widget_class</code> is provided but <code>wrap_signals</code> is None, all Signals defined on <code>widget_class</code> will be wrapped.</p> <p>The container widget must have a <code>addWidget</code> method that takes a widget and a string identifier. This method is overridden to create the widgets (using the given <code>widget_class</code>) and connect the wrapped signals. The signature of the overriden <code>addWidget</code> method is <code>key, *args, **kwargs</code>.</p> Source code in <code>customQObjects/core/wrapsignalsmeta.py</code> <pre><code>class WrapSignalsMeta(type(QObject), type):\n    \"\"\"\n    Metaclass for any container widget (e.g. StackedWidget).\n\n    Using `WrapSignalsMeta` as the metaclass automatically wraps given signals\n    from the widgets contained within.\n\n    All the contained widgets should be of the same type; pass this type to\n    `widget_class` and a list of strings of signal names `wrap_signals`.\n    The signature of the signals is found from the `widget_class`.\n\n    If a `widget_class` is provided but `wrap_signals` is None, all Signals\n    defined on `widget_class` will be wrapped.\n\n    The container widget must have a `addWidget` method that takes a widget and\n    a string identifier. This method is overridden to create the widgets\n    (using the given `widget_class`) and connect the wrapped signals. The signature\n    of the overriden `addWidget` method is `key, *args, **kwargs`.\n    \"\"\"\n\n    def __new__(cls, clsname, bases, attrs, widget_class=None, wrap_signals=None):\n        if widget_class is not None:\n            signals = get_signal_signature(widget_class, wrap_signals)\n            if signals is not None:\n                for signal_name, signal_args in signals:\n                    signal_args.insert(0, \"str\")\n                    signal_args = \",\".join(signal_args)\n                    signal_def = f\"Signal({signal_args})\"\n                    attrs[signal_name] = eval(signal_def)\n            if wrap_signals is None:\n                if signals is None:\n                    wrap_signals = []\n                else:\n                    wrap_signals = [signal[0] for signal in signals]\n\n        attrs[\"addWidget\"] = override_addWidget(widget_class, wrap_signals, bases)\n        attrs[\"__getattr__\"] = override_getattr(wrap_signals, bases)\n        return type(clsname, bases, attrs)\n</code></pre>"},{"location":"gui/","title":"Gui","text":""},{"location":"gui/#gui","title":"Gui","text":""},{"location":"gui/#customQObjects.gui.getIconFromTheme","title":"<code>getIconFromTheme(name)</code>","text":"<p>If QIcon.hasThemeIcon(name) is True, return QIcon.fromTheme(name).</p> <p>Otherwise, return None.</p> Source code in <code>customQObjects/gui/__init__.py</code> <pre><code>def getIconFromTheme(name: str) -&gt; QIcon:\n    \"\"\"\n    If [QIcon.hasThemeIcon(name)](https://doc.qt.io/qt-6/qicon.html#hasThemeIcon) is True,\n    return [QIcon.fromTheme(name)](https://doc.qt.io/qt-6/qicon.html#fromTheme).\n\n    Otherwise, return None.\n    \"\"\"\n    if QIcon.hasThemeIcon(name):\n        return QIcon.fromTheme(name)\n    else:\n        return None\n</code></pre>"},{"location":"gui/#customQObjects.gui.makeBrush","title":"<code>makeBrush(arg)</code>","text":"<p>Return a QBrush from <code>arg</code>.</p> <p><code>arg</code> can be a QBrush, QColor or any valid QColor constructor arg.</p> Source code in <code>customQObjects/gui/__init__.py</code> <pre><code>def makeBrush(arg) -&gt; QBrush:\n    \"\"\"\n    Return a [QBrush](https://doc.qt.io/qt-6/qbrush.html) from `arg`.\n\n    `arg` can be a [QBrush](https://doc.qt.io/qt-6/qbrush.html),\n    [QColor](https://doc.qt.io/qt-6/qcolor.html)\n    or any valid [QColor](https://doc.qt.io/qt-6/qcolor.html) constructor arg.\n    \"\"\"\n    if isinstance(arg, QBrush):\n        return arg\n    if isinstance(arg, QColor):\n        return QBrush(arg)\n    if isinstance(arg, str):\n        try:\n            color = QColor(arg)\n        except:\n            raise ValueError(f\"Could not construct QBrush from '{arg}'\")\n        else:\n            return QBrush(color)\n    return None\n</code></pre>"},{"location":"widgets/","title":"Widgets","text":""},{"location":"widgets/#widgets","title":"Widgets","text":""},{"location":"widgets/#customQObjects.widgets.ClickMixin","title":"<code>ClickMixin</code>","text":"<p>               Bases: <code>object</code></p> <p>Emit a <code>clicked</code> signal in mouseReleaseEvent</p> Source code in <code>customQObjects/widgets/simplemixins.py</code> <pre><code>class ClickMixin(object):\n    \"\"\"\n    Emit a `clicked` signal in\n    [mouseReleaseEvent][customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent]\n    \"\"\"\n\n    clicked = Signal()\n    \"\"\"\n    Signal emitted in\n    [mouseReleaseEvent][customQObjects.widgets.simplemixins.ClickMixin.mouseReleaseEvent]\n    \"\"\"\n\n    def mouseReleaseEvent(self, event):\n        \"\"\"\n        Emit [clicked][customQObjects.widgets.simplemixins.ClickMixin.clicked] signal and call\n        `super().mouseReleaseEvent`\n        \"\"\"\n        self.clicked.emit()\n        return super().mouseReleaseEvent(event)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ClickMixin.clicked","title":"<code>clicked = Signal()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Signal emitted in mouseReleaseEvent</p>"},{"location":"widgets/#customQObjects.widgets.ClickMixin.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event)</code>","text":"<p>Emit clicked signal and call <code>super().mouseReleaseEvent</code></p> Source code in <code>customQObjects/widgets/simplemixins.py</code> <pre><code>def mouseReleaseEvent(self, event):\n    \"\"\"\n    Emit [clicked][customQObjects.widgets.simplemixins.ClickMixin.clicked] signal and call\n    `super().mouseReleaseEvent`\n    \"\"\"\n    self.clicked.emit()\n    return super().mouseReleaseEvent(event)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ComboBox","title":"<code>ComboBox</code>","text":"<p>               Bases: <code>QComboBox</code></p> <p>QComboBox with items property and ability to automatically create item model.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[NamedTuple]</code> <p>If provided, this will be used to display and return data. The tuple fields should be 'name' and 'value'; 'name' is displayed as text and 'value' is returned by value. If not provided, value will return the current text.</p> <code>None</code> <code>model</code> <code>QAbstractListModel</code> <p>Model to use. If not provided, a ComboBoxModel is created that returns the 'name' and 'value' from the <code>values</code> list when asked for the Qt.DisplayRole and Qt.UserRole respectively</p> <code>None</code> <code>args</code> <p>QComboBox args</p> <code>()</code> <code>kwargs</code> <p>QComboBox kwargs</p> <code>{}</code> Source code in <code>customQObjects/widgets/combobox.py</code> <pre><code>class ComboBox(QComboBox):\n    \"\"\"\n    [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) with\n    [items][customQObjects.widgets.ComboBox.items] property and ability to\n    automatically create item model.\n\n    Parameters\n    ----------\n    values : list[NamedTuple], optional\n        If provided, this will be used to display and return data. The tuple\n        fields should be 'name' and 'value'; 'name' is displayed as text and\n        'value' is returned by [value][customQObjects.widgets.combobox.ComboBox.value].\n        If not provided, [value][customQObjects.widgets.combobox.ComboBox.value] will return the\n        current text.\n    model : QAbstractListModel, optional\n        Model to use. If not provided, a [ComboBoxModel][customQObjects.widgets.ComboBoxModel]\n        is created that returns the 'name' and 'value' from the `values` list when asked for the\n        [Qt.DisplayRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum) and\n        [Qt.UserRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum) respectively\n    args :\n        [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) args\n    kwargs :\n        [QComboBox](https://doc.qt.io/qt-6/qcombobox.html) kwargs\n    \"\"\"\n\n    def __init__(self, *args, values: list[NamedTuple] = None, model=None, **kwargs):\n        super().__init__(*args, **kwargs)\n        if model is None:\n            model = ComboBoxModel\n        if values is not None:\n            mdl = model(values)\n            self.setModel(mdl)\n        self._values = values\n\n    @property\n    def items(self):\n        \"\"\"Return list of text from all items.\"\"\"\n        return [self.itemText(idx) for idx in range(self.count())]\n\n    @property\n    def value(self):\n        \"\"\"Return current value\"\"\"\n        if self._values is None:\n            return self.currentText()\n        else:\n            return self.itemData(self.currentIndex(), Qt.UserRole)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ComboBox.items","title":"<code>items</code>  <code>property</code>","text":"<p>Return list of text from all items.</p>"},{"location":"widgets/#customQObjects.widgets.ComboBox.value","title":"<code>value</code>  <code>property</code>","text":"<p>Return current value</p>"},{"location":"widgets/#customQObjects.widgets.ComboBoxModel","title":"<code>ComboBoxModel</code>","text":"<p>               Bases: <code>QAbstractListModel</code></p> <p>QAbstractListModel that takes a list of NamedTuples with field names 'name' and 'value'.</p> <p>data will return the <code>name</code> when asked for the Qt.DisplayRole and the <code>value</code> when asked for the Qt.UserRole.</p> Source code in <code>customQObjects/widgets/combobox.py</code> <pre><code>class ComboBoxModel(QAbstractListModel):\n    \"\"\"\n    [QAbstractListModel](https://doc.qt.io/qt-6/qabstractlistmodel.html)\n    that takes a list of\n    [NamedTuples](https://docs.python.org/3/library/typing.html#typing.NamedTuple)\n    with field names 'name' and 'value'.\n\n    [data][customQObjects.widgets.ComboBoxModel.data] will return the `name` when\n    asked for the [Qt.DisplayRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum)\n    and the `value` when asked for the\n    [Qt.UserRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum).\n    \"\"\"\n\n    def __init__(self, values: list[NamedTuple], *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.values = values\n\n    def headerData(self):\n        return None\n\n    def rowCount(self, column=None):\n        return len(self.values)\n\n    def data(self, idx, role):\n        \"\"\"\n        Return the data at index `idx`.\n\n        If `role` is [Qt.DisplayRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum), return the\n        NamedTuple's `name`.\n        If `role` is [Qt.UserRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum), return the\n        NamedTuple's `value`.\n        \"\"\"\n        if not idx.isValid():\n            return None\n\n        value = self.values[idx.row()]\n\n        if role == Qt.DisplayRole:\n            return value.name\n\n        elif role == Qt.UserRole:\n            return value.value\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ComboBoxModel.data","title":"<code>data(idx, role)</code>","text":"<p>Return the data at index <code>idx</code>.</p> <p>If <code>role</code> is Qt.DisplayRole, return the NamedTuple's <code>name</code>. If <code>role</code> is Qt.UserRole, return the NamedTuple's <code>value</code>.</p> Source code in <code>customQObjects/widgets/combobox.py</code> <pre><code>def data(self, idx, role):\n    \"\"\"\n    Return the data at index `idx`.\n\n    If `role` is [Qt.DisplayRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum), return the\n    NamedTuple's `name`.\n    If `role` is [Qt.UserRole](https://doc.qt.io/qt-6/qt.html#ItemDataRole-enum), return the\n    NamedTuple's `value`.\n    \"\"\"\n    if not idx.isValid():\n        return None\n\n    value = self.values[idx.row()]\n\n    if role == Qt.DisplayRole:\n        return value.name\n\n    elif role == Qt.UserRole:\n        return value.value\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.DoubleSpinBox","title":"<code>DoubleSpinBox</code>","text":"<p>               Bases: <code>QDoubleSpinBox</code></p> <p>QDoubleSpinBox that allows min and max to be  essentially unset.</p> See Also <p>SpinBox</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>class DoubleSpinBox(QDoubleSpinBox):\n    \"\"\"\n    [QDoubleSpinBox](https://doc.qt.io/qt-6/qsdoublepinbox.html) that allows min and max to be \n    essentially unset.\n\n    See Also\n    --------\n    [SpinBox][customQObjects.widgets.SpinBox]\n    \"\"\"\n\n    def setMinimum(self, value: float = None):\n        \"\"\"Set minimum value. If `None`, there will be no minimum\"\"\"\n        if value is None:\n            value = -sys.float_info.max\n        return super().setMinimum(value)\n\n    def setMaximum(self, value: float = None):\n        \"\"\"Set maximum value. If `None`, there will be no maximum\"\"\"\n        if value is None:\n            value = sys.float_info.max\n        return super().setMaximum(value)\n\n    def setRange(self, minimum: float = None, maximum: float = None):\n        \"\"\"Set minimum and/or maximum\"\"\"\n        self.setMinimum(minimum)\n        self.setMaximum(maximum)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.DoubleSpinBox.setMaximum","title":"<code>setMaximum(value=None)</code>","text":"<p>Set maximum value. If <code>None</code>, there will be no maximum</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>def setMaximum(self, value: float = None):\n    \"\"\"Set maximum value. If `None`, there will be no maximum\"\"\"\n    if value is None:\n        value = sys.float_info.max\n    return super().setMaximum(value)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.DoubleSpinBox.setMinimum","title":"<code>setMinimum(value=None)</code>","text":"<p>Set minimum value. If <code>None</code>, there will be no minimum</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>def setMinimum(self, value: float = None):\n    \"\"\"Set minimum value. If `None`, there will be no minimum\"\"\"\n    if value is None:\n        value = -sys.float_info.max\n    return super().setMinimum(value)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.DoubleSpinBox.setRange","title":"<code>setRange(minimum=None, maximum=None)</code>","text":"<p>Set minimum and/or maximum</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>def setRange(self, minimum: float = None, maximum: float = None):\n    \"\"\"Set minimum and/or maximum\"\"\"\n    self.setMinimum(minimum)\n    self.setMaximum(maximum)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ElideLabel","title":"<code>ElideLabel</code>","text":"<p>               Bases: <code>ElideMixin</code>, <code>QLabel</code></p> <p>QLabel that automatically elides its text.</p> <p>See ElideMixin for additional args and kwargs.</p> Source code in <code>customQObjects/widgets/elidemixin.py</code> <pre><code>class ElideLabel(ElideMixin, QLabel):\n    \"\"\"[QLabel](https://doc.qt.io/qt-5/qlabel.html) that automatically elides its text.\n\n    See [ElideMixin][customQObjects.widgets.ElideMixin] for additional args and kwargs.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if len(args) == 1:\n            self.setText(args[0])\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ElideMixin","title":"<code>ElideMixin</code>","text":"<p>               Bases: <code>object</code></p> <p>Mixin providing functionality to automatically elide text</p> <p>Parameters:</p> Name Type Description Default <code>elideMode</code> <code>(middle, left, right, None, TextElideMode)</code> <p>Text elide mode, either as string or Qt.TextElideMode</p> <code>'middle'</code> <code>widthAdjust</code> <code>int</code> <p>If provided, this value will be added to the widget's width when calling QFontMetrics.elidedText</p> <code>0</code> Source code in <code>customQObjects/widgets/elidemixin.py</code> <pre><code>class ElideMixin(object):\n    \"\"\"\n    Mixin providing functionality to automatically elide text\n\n    Parameters\n    ----------\n    elideMode : {'middle', 'left', 'right', 'None', Qt.TextElideMode}\n        Text elide mode, either as string or\n        [Qt.TextElideMode](https://doc.qt.io/qt-6/qt.html#TextElideMode-enum&gt;)\n    widthAdjust : int, optional\n        If provided, this value will be added to the widget's width when\n        calling [QFontMetrics.elidedText](https://doc.qt.io/qt-6/qfontmetrics.html#elidedText)\n    \"\"\"\n\n    elideModes = {\n        \"left\": Qt.ElideLeft,\n        \"middle\": Qt.ElideMiddle,\n        \"right\": Qt.ElideRight,\n        \"none\": Qt.ElideNone,\n    }\n\n    def __init__(self, *args, elideMode=\"middle\", widthAdjust=0, **kwargs):\n        self._fullText = \"\"\n        self._widthAdjust = widthAdjust\n        self._elideMode = self._validateMode(elideMode)\n\n        super().__init__(*args, **kwargs)\n\n    @property\n    def fullText(self):\n        \"\"\"Un-elided text\"\"\"\n        return self._fullText\n\n    @property\n    def elideMode(self):\n        \"\"\"Current elide mode\"\"\"\n        return self._elideMode\n\n    @elideMode.setter\n    def elideMode(self, mode):\n        \"\"\"Set elide mode and update text\"\"\"\n        self._elideMode = self._validateMode(mode)\n        self._resetText()\n\n    @property\n    def widthAdjust(self):\n        \"\"\"Current width adjust\"\"\"\n        return self._widthAdjust\n\n    @widthAdjust.setter\n    def widthAdjust(self, value):\n        \"\"\"Set width adjust and update text\"\"\"\n        self._widthAdjust = value\n        self._resetText()\n\n    def _validateMode(self, mode):\n        \"\"\"Return requested Qt.TextElideMode\"\"\"\n        if mode is None:\n            mode = \"none\"\n        if isinstance(mode, str):\n            mode = mode.lower()\n            if mode not in self.elideModes:\n                raise ValueError(f\"'{mode}' not valid elide mode\")\n            else:\n                mode = self.elideModes[mode]\n        else:\n            if mode not in self.elideModes.values():\n                raise ValueError(f\"'{mode}' not valid elide mode\")\n        return mode\n\n    def setText(self, text):\n        \"\"\"Elide `text` and set it\"\"\"\n        self._fullText = text\n        metrics = QFontMetrics(self.font())\n        elided = metrics.elidedText(text, self.elideMode, self.width() + self.widthAdjust)\n        super().setText(elided)\n        self.setToolTip(self._fullText)\n\n    def _resetText(self):\n        \"\"\"Reset text from :attr:`fullText`\"\"\"\n        self.setText(self._fullText)\n\n    def resizeEvent(self, event):\n        \"\"\"Override resizeEvent to update text\"\"\"\n        self._resetText()\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ElideMixin.elideMode","title":"<code>elideMode</code>  <code>property</code> <code>writable</code>","text":"<p>Current elide mode</p>"},{"location":"widgets/#customQObjects.widgets.ElideMixin.fullText","title":"<code>fullText</code>  <code>property</code>","text":"<p>Un-elided text</p>"},{"location":"widgets/#customQObjects.widgets.ElideMixin.widthAdjust","title":"<code>widthAdjust</code>  <code>property</code> <code>writable</code>","text":"<p>Current width adjust</p>"},{"location":"widgets/#customQObjects.widgets.ElideMixin.resizeEvent","title":"<code>resizeEvent(event)</code>","text":"<p>Override resizeEvent to update text</p> Source code in <code>customQObjects/widgets/elidemixin.py</code> <pre><code>def resizeEvent(self, event):\n    \"\"\"Override resizeEvent to update text\"\"\"\n    self._resetText()\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ElideMixin.setText","title":"<code>setText(text)</code>","text":"<p>Elide <code>text</code> and set it</p> Source code in <code>customQObjects/widgets/elidemixin.py</code> <pre><code>def setText(self, text):\n    \"\"\"Elide `text` and set it\"\"\"\n    self._fullText = text\n    metrics = QFontMetrics(self.font())\n    elided = metrics.elidedText(text, self.elideMode, self.width() + self.widthAdjust)\n    super().setText(elided)\n    self.setToolTip(self._fullText)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.GroupBox","title":"<code>GroupBox</code>","text":"<p>               Bases: <code>QGroupBox</code></p> <p>QGroupBox with a layout automatically set.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>(vbox, hbox, grid, form, QLayout)</code> <p>Type of layout to create. If given a QLayout instance, that will be used. Default is \"vbox\", i.e.  QVBoxLayout.</p> <code>\"vbox\"</code> <code>args</code> <p>Args to pass to QGroupBox constructor</p> <code>()</code> <code>kwargs</code> <p>Kwargs to pass to QGroupBox constructor</p> <code>{}</code> Source code in <code>customQObjects/widgets/groupbox.py</code> <pre><code>class GroupBox(QGroupBox):\n    \"\"\"\n    [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) with a layout automatically set.\n\n    Parameters\n    ----------\n    layout : {\"vbox\", \"hbox\", \"grid\", \"form\", QLayout}\n        Type of layout to create. If given a [QLayout](https://doc.qt.io/qt-6/qlayout.html) instance,\n        that will be used. Default is \"vbox\", i.e. \n        [QVBoxLayout](https://doc.qt.io/qt-6/qvboxlayout.html).\n    args\n        Args to pass to [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) constructor\n    kwargs\n        Kwargs to pass to [QGroupBox](https://doc.qt.io/qt-6/qgroupbox.html) constructor\n    \"\"\"\n\n    def __init__(self, *args, layout=\"vbox\", **kwargs):\n        super().__init__(*args, **kwargs)\n\n        layouts = {\n            \"vbox\": QVBoxLayout,\n            \"hbox\": QHBoxLayout,\n            \"grid\": QGridLayout,\n            \"form\": QFormLayout,\n        }\n        if isinstance(layout, str):\n            if layout not in layout:\n                valid = \"'{}', '{}' or '{}'\".format(*layouts.keys())\n                msg = f\"GroupBox direction should be {valid} or a QLayout instance, not '{layout}'\"\n                raise ValueError(msg)\n            layoutObj = layouts[layout]\n            self.layout = layoutObj()\n        elif isinstance(layout, QLayout):\n            self.layout = layout\n        else:\n            msg = f\"GroupBox direction should be {valid} or a QLayout instance, not '{layout}'\"\n            raise ValueError(msg)\n        self.setLayout(self.layout)\n\n    def addWidget(self, *args, **kwargs):\n        \"\"\"Add a widget to the internal layout.\"\"\"\n        return self.layout.addWidget(*args, **kwargs)\n\n    def addLayout(self, *args, **kwargs):\n        \"\"\"Add a layout to the internal layout.\"\"\"\n        return self.layout.addLayout(*args, **kwargs)\n\n    def addRow(self, *args, **kwargs):\n        \"\"\"Add row to a form layout\"\"\"\n        if not isinstance(self.layout, QFormLayout):\n            raise RuntimeError(\n                f\"'addRow' method only exists for QFormLayouts, not {self.layout.__class__}\"\n            )\n        return self.layout.addRow(*args, **kwargs)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.GroupBox.addLayout","title":"<code>addLayout(*args, **kwargs)</code>","text":"<p>Add a layout to the internal layout.</p> Source code in <code>customQObjects/widgets/groupbox.py</code> <pre><code>def addLayout(self, *args, **kwargs):\n    \"\"\"Add a layout to the internal layout.\"\"\"\n    return self.layout.addLayout(*args, **kwargs)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.GroupBox.addRow","title":"<code>addRow(*args, **kwargs)</code>","text":"<p>Add row to a form layout</p> Source code in <code>customQObjects/widgets/groupbox.py</code> <pre><code>def addRow(self, *args, **kwargs):\n    \"\"\"Add row to a form layout\"\"\"\n    if not isinstance(self.layout, QFormLayout):\n        raise RuntimeError(\n            f\"'addRow' method only exists for QFormLayouts, not {self.layout.__class__}\"\n        )\n    return self.layout.addRow(*args, **kwargs)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.GroupBox.addWidget","title":"<code>addWidget(*args, **kwargs)</code>","text":"<p>Add a widget to the internal layout.</p> Source code in <code>customQObjects/widgets/groupbox.py</code> <pre><code>def addWidget(self, *args, **kwargs):\n    \"\"\"Add a widget to the internal layout.\"\"\"\n    return self.layout.addWidget(*args, **kwargs)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.HSplitter","title":"<code>HSplitter</code>","text":"<p>               Bases: <code>Splitter</code></p> <p>Splitter with horizontal orientation</p> Source code in <code>customQObjects/widgets/splitter.py</code> <pre><code>class HSplitter(Splitter):\n    \"\"\"[Splitter][customQObjects.widgets.Splitter] with horizontal orientation\"\"\"\n\n    def __init__(self, parent=None):\n        super().__init__(Qt.Horizontal, parent=parent)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ListSelector","title":"<code>ListSelector</code>","text":"<p>               Bases: <code>QFrame</code></p> <p>Widget showing a list of strings, with the current one highlighted.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[str]</code> <p>List of strings to show</p> required <code>orientation</code> <code>(vertical, horizontal)</code> <p>Orientation for list of widgets.</p> <code>'vertical'</code> <code>style</code> <code>str</code> <p>Html style to use for each label.</p> <code>None</code> Source code in <code>customQObjects/widgets/listselector.py</code> <pre><code>class ListSelector(QFrame):\n    \"\"\"\n    Widget showing a list of strings, with the current one highlighted.\n\n    Parameters\n    ----------\n    values : list[str]\n        List of strings to show\n    orientation : {'vertical', 'horizontal'}\n        Orientation for list of widgets.\n    style : str, optional\n        Html style to use for each label.\n    \"\"\"\n\n    def __init__(\n        self, *args, values: list[str], orientation: str = \"vertical\", style=None, **kwargs\n    ):\n        super().__init__(*args, **kwargs)\n\n        valid = [\"vertical\", \"horizontal\"]\n        if orientation not in valid:\n            msg = f\"Invalid orientation '{orientation}'. \"\n            msg += \"Valid orientations are 'vertical' or 'horizontal'\"\n            raise ValueError(msg)\n\n        self._current_idx = 0\n\n        self.labels = []\n\n        self.layout = QVBoxLayout() if orientation == \"vertical\" else QHBoxLayout()\n\n        for value in values:\n            label = StyledLabel()\n            label.set_css_style(style)\n            label.set_text(value)\n\n            label.setFrameShape(QFrame.NoFrame)\n            label.setAlignment(Qt.AlignCenter)\n            self.layout.addWidget(label)\n            self.labels.append(label)\n\n        self.setLayout(self.layout)\n\n        self.setFrameShape(QFrame.Box)\n        self.set_current_index(0)\n\n    @property\n    def current_index(self):\n        \"\"\"Index of currently highlighted label.\"\"\"\n        return self._current_idx\n\n    @current_index.setter\n    def current_index(self, idx):\n        self.set_current_index(idx)\n\n    @property\n    def current_text(self):\n        \"\"\"Text of currently highlighted label.\"\"\"\n        return self.labels[self._current_idx].text()\n\n    @current_text.setter\n    def current_text(self, text):\n        self.set_current_text(text)\n\n    def set_current_text(self, text):\n        \"\"\"\n        Set current label by `text`.\n\n        Raise ValueError if no label with `text` is found.\n        \"\"\"\n        for idx, label in enumerate(self._labels):\n            if label.text() == text:\n                self.set_current_index(idx)\n\n        msg = f\"No label with text '{text}'\"\n        raise ValueError(msg)\n\n    def set_current_index(self, idx):\n        \"\"\"Highlight label at index `idx`.\"\"\"\n        self.labels[self._current_idx].setFrameShape(QFrame.NoFrame)\n        self._current_idx = idx\n        self.labels[self._current_idx].setFrameShape(QFrame.Box)\n\n    def next(self):\n        \"\"\"Highlight next label, looping back to beginning if at end.\"\"\"\n        if self.current_index == len(self.labels) - 1:\n            self.current_index = 0\n        else:\n            self.current_index += 1\n\n    def previous(self):\n        \"\"\"Highlight previous label, looping to end if at beginning.\"\"\"\n        if self.current_index == 0:\n            self.current_index = len(self.labels) - 1\n        else:\n            self.current_index -= 1\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ListSelector.current_index","title":"<code>current_index</code>  <code>property</code> <code>writable</code>","text":"<p>Index of currently highlighted label.</p>"},{"location":"widgets/#customQObjects.widgets.ListSelector.current_text","title":"<code>current_text</code>  <code>property</code> <code>writable</code>","text":"<p>Text of currently highlighted label.</p>"},{"location":"widgets/#customQObjects.widgets.ListSelector.next","title":"<code>next()</code>","text":"<p>Highlight next label, looping back to beginning if at end.</p> Source code in <code>customQObjects/widgets/listselector.py</code> <pre><code>def next(self):\n    \"\"\"Highlight next label, looping back to beginning if at end.\"\"\"\n    if self.current_index == len(self.labels) - 1:\n        self.current_index = 0\n    else:\n        self.current_index += 1\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ListSelector.previous","title":"<code>previous()</code>","text":"<p>Highlight previous label, looping to end if at beginning.</p> Source code in <code>customQObjects/widgets/listselector.py</code> <pre><code>def previous(self):\n    \"\"\"Highlight previous label, looping to end if at beginning.\"\"\"\n    if self.current_index == 0:\n        self.current_index = len(self.labels) - 1\n    else:\n        self.current_index -= 1\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ListSelector.set_current_index","title":"<code>set_current_index(idx)</code>","text":"<p>Highlight label at index <code>idx</code>.</p> Source code in <code>customQObjects/widgets/listselector.py</code> <pre><code>def set_current_index(self, idx):\n    \"\"\"Highlight label at index `idx`.\"\"\"\n    self.labels[self._current_idx].setFrameShape(QFrame.NoFrame)\n    self._current_idx = idx\n    self.labels[self._current_idx].setFrameShape(QFrame.Box)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.ListSelector.set_current_text","title":"<code>set_current_text(text)</code>","text":"<p>Set current label by <code>text</code>.</p> <p>Raise ValueError if no label with <code>text</code> is found.</p> Source code in <code>customQObjects/widgets/listselector.py</code> <pre><code>def set_current_text(self, text):\n    \"\"\"\n    Set current label by `text`.\n\n    Raise ValueError if no label with `text` is found.\n    \"\"\"\n    for idx, label in enumerate(self._labels):\n        if label.text() == text:\n            self.set_current_index(idx)\n\n    msg = f\"No label with text '{text}'\"\n    raise ValueError(msg)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.SpinBox","title":"<code>SpinBox</code>","text":"<p>               Bases: <code>QSpinBox</code></p> <p>QSpinBox that allows min and max to be essentially unset.</p> See Also <p>DoubleSpinBox</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>class SpinBox(QSpinBox):\n    \"\"\"\n    [QSpinBox](https://doc.qt.io/qt-6/qspinbox.html) that allows min and max to be essentially unset.\n\n    See Also\n    --------\n    [DoubleSpinBox][customQObjects.widgets.DoubleSpinBox]\n    \"\"\"\n\n    def setMinimum(self, value: int = None):\n        \"\"\"Set minimum value. If `None`, there will be no minimum\"\"\"\n        if value is None:\n            value = -2147483648\n        return super().setMinimum(value)\n\n    def setMaximum(self, value: int = None):\n        \"\"\"Set maximum value. If `None`, there will be no maximum\"\"\"\n        if value is None:\n            value = 2147483647\n        return super().setMaximum(value)\n\n    def setRange(self, minimum: int = None, maximum: int = None):\n        \"\"\"Set minimum and/or maximum\"\"\"\n        self.setMinimum(minimum)\n        self.setMaximum(maximum)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.SpinBox.setMaximum","title":"<code>setMaximum(value=None)</code>","text":"<p>Set maximum value. If <code>None</code>, there will be no maximum</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>def setMaximum(self, value: int = None):\n    \"\"\"Set maximum value. If `None`, there will be no maximum\"\"\"\n    if value is None:\n        value = 2147483647\n    return super().setMaximum(value)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.SpinBox.setMinimum","title":"<code>setMinimum(value=None)</code>","text":"<p>Set minimum value. If <code>None</code>, there will be no minimum</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>def setMinimum(self, value: int = None):\n    \"\"\"Set minimum value. If `None`, there will be no minimum\"\"\"\n    if value is None:\n        value = -2147483648\n    return super().setMinimum(value)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.SpinBox.setRange","title":"<code>setRange(minimum=None, maximum=None)</code>","text":"<p>Set minimum and/or maximum</p> Source code in <code>customQObjects/widgets/spinbox.py</code> <pre><code>def setRange(self, minimum: int = None, maximum: int = None):\n    \"\"\"Set minimum and/or maximum\"\"\"\n    self.setMinimum(minimum)\n    self.setMaximum(maximum)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.Splitter","title":"<code>Splitter</code>","text":"<p>               Bases: <code>QSplitter</code></p> <p>QSplitter with addLayout method</p> See Also <p>VSplitter</p> <p>HSplitter</p> Source code in <code>customQObjects/widgets/splitter.py</code> <pre><code>class Splitter(QSplitter):\n    \"\"\"\n    [QSplitter](https://doc.qt.io/qt-6/qsplitter.html) with\n    [addLayout][customQObjects.widgets.Splitter.addLayout] method\n\n    See Also\n    --------\n    [VSplitter][customQObjects.widgets.VSplitter]\n\n    [HSplitter][customQObjects.widgets.HSplitter]\n    \"\"\"\n\n    def addLayout(self, layout: QLayout):\n        \"\"\"Add `layout` to splitter by creating a container widget for it\"\"\"\n        container = QWidget()\n        container.setLayout(layout)\n        self.addWidget(container)\n\n    def setStretchFactors(self, stretch: list[int]):\n        \"\"\"Set multiple stretch factors from list\"\"\"\n        for idx, sf in enumerate(stretch):\n            self.setStretchFactor(idx, sf)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.Splitter.addLayout","title":"<code>addLayout(layout)</code>","text":"<p>Add <code>layout</code> to splitter by creating a container widget for it</p> Source code in <code>customQObjects/widgets/splitter.py</code> <pre><code>def addLayout(self, layout: QLayout):\n    \"\"\"Add `layout` to splitter by creating a container widget for it\"\"\"\n    container = QWidget()\n    container.setLayout(layout)\n    self.addWidget(container)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.Splitter.setStretchFactors","title":"<code>setStretchFactors(stretch)</code>","text":"<p>Set multiple stretch factors from list</p> Source code in <code>customQObjects/widgets/splitter.py</code> <pre><code>def setStretchFactors(self, stretch: list[int]):\n    \"\"\"Set multiple stretch factors from list\"\"\"\n    for idx, sf in enumerate(stretch):\n        self.setStretchFactor(idx, sf)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget","title":"<code>StackedWidget</code>","text":"<p>               Bases: <code>QStackedWidget</code></p> <p>QStackedWidget that stores references to its pages in a dict.</p> <p>Also can pass dict of <code>pages</code> to initialise the stack.</p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>class StackedWidget(QStackedWidget):\n    \"\"\"\n    [QStackedWidget](https://doc.qt.io/qt-6/qstackedwidget.html) that stores references to its pages\n    in a dict.\n\n    Also can pass dict of `pages` to initialise the stack.\n    \"\"\"\n\n    def __init__(self, *args, pages={}, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self._widgetDict = {}\n        for key, widget in pages.items():\n            self.addWidget(widget, key)\n\n    def __getitem__(self, key):\n        \"\"\"Get widget identified by `key`\"\"\"\n        widget = self._widgetDict.get(key, None)\n        if widget is not None:\n            return widget\n        else:\n            raise KeyError(f\"StackedWidget has no widget '{key}'\")\n\n    def __contains__(self, key):\n        return key in self._widgetDict\n\n    @property\n    def widgetDict(self) -&gt; dict:\n        \"\"\"Return dictionary of keys and widgets\"\"\"\n        return self._widgetDict\n\n    @property\n    def widgets(self) -&gt; list[QWidget]:\n        \"\"\"Return list of all widgets\"\"\"\n        return [self.widget(idx) for idx in range(self.count())]\n\n    def addWidget(self, widget, key=None) -&gt; int:\n        \"\"\"\n        Add `widget` to the stack, associated with key `key`.\n\n        If `key` not provided a uuid will be generated.\n        \"\"\"\n        if key is None:\n            key = uuid4()\n        if key in self._widgetDict:\n            raise KeyError(f\"Key '{key}' already present in StackedWidget\")\n        self._widgetDict[key] = widget\n        return super().addWidget(widget)\n\n    def insertWidget(self, index, widget, key=None) -&gt; int:\n        \"\"\"\n        Insert `widget` to the stack, associated with key `key`, at position `index`\n\n        If `key` not provided a uuid will be generated.\n        \"\"\"\n        if key is None:\n            key = uuid4()\n        if key in self._widgetDict:\n            raise KeyError(f\"Key '{key}' already present in StackedWidget\")\n        self._widgetDict[key] = widget\n        return super().insertWidget(index, widget)\n\n    def removeWidget(self, widget):\n        \"\"\"\n        Remove `widget` from stack.\n\n        `widget` can be a [QWidget](https://doc.qt.io/qt-6/qwidget.html) instance or a key.\n        \"\"\"\n        if widget in self._widgetDict:\n            widget = self._widgetDict[widget]\n        super().removeWidget(widget)\n        del self._widgetDict[widget]\n\n    def keyOf(self, widget):\n        \"\"\"Return key associated with `widget`.\"\"\"\n        for key, value in self._widgetDict.items():\n            if value == widget:\n                return key\n        return None\n\n    def setCurrentKey(self, key):\n        \"\"\"Set current widget to that identified by `key`\"\"\"\n        self.setCurrentWidget(self._widgetDict[key])\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.widgetDict","title":"<code>widgetDict</code>  <code>property</code>","text":"<p>Return dictionary of keys and widgets</p>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.widgets","title":"<code>widgets</code>  <code>property</code>","text":"<p>Return list of all widgets</p>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Get widget identified by <code>key</code></p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>def __getitem__(self, key):\n    \"\"\"Get widget identified by `key`\"\"\"\n    widget = self._widgetDict.get(key, None)\n    if widget is not None:\n        return widget\n    else:\n        raise KeyError(f\"StackedWidget has no widget '{key}'\")\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.addWidget","title":"<code>addWidget(widget, key=None)</code>","text":"<p>Add <code>widget</code> to the stack, associated with key <code>key</code>.</p> <p>If <code>key</code> not provided a uuid will be generated.</p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>def addWidget(self, widget, key=None) -&gt; int:\n    \"\"\"\n    Add `widget` to the stack, associated with key `key`.\n\n    If `key` not provided a uuid will be generated.\n    \"\"\"\n    if key is None:\n        key = uuid4()\n    if key in self._widgetDict:\n        raise KeyError(f\"Key '{key}' already present in StackedWidget\")\n    self._widgetDict[key] = widget\n    return super().addWidget(widget)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.insertWidget","title":"<code>insertWidget(index, widget, key=None)</code>","text":"<p>Insert <code>widget</code> to the stack, associated with key <code>key</code>, at position <code>index</code></p> <p>If <code>key</code> not provided a uuid will be generated.</p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>def insertWidget(self, index, widget, key=None) -&gt; int:\n    \"\"\"\n    Insert `widget` to the stack, associated with key `key`, at position `index`\n\n    If `key` not provided a uuid will be generated.\n    \"\"\"\n    if key is None:\n        key = uuid4()\n    if key in self._widgetDict:\n        raise KeyError(f\"Key '{key}' already present in StackedWidget\")\n    self._widgetDict[key] = widget\n    return super().insertWidget(index, widget)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.keyOf","title":"<code>keyOf(widget)</code>","text":"<p>Return key associated with <code>widget</code>.</p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>def keyOf(self, widget):\n    \"\"\"Return key associated with `widget`.\"\"\"\n    for key, value in self._widgetDict.items():\n        if value == widget:\n            return key\n    return None\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.removeWidget","title":"<code>removeWidget(widget)</code>","text":"<p>Remove <code>widget</code> from stack.</p> <p><code>widget</code> can be a QWidget instance or a key.</p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>def removeWidget(self, widget):\n    \"\"\"\n    Remove `widget` from stack.\n\n    `widget` can be a [QWidget](https://doc.qt.io/qt-6/qwidget.html) instance or a key.\n    \"\"\"\n    if widget in self._widgetDict:\n        widget = self._widgetDict[widget]\n    super().removeWidget(widget)\n    del self._widgetDict[widget]\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.StackedWidget.setCurrentKey","title":"<code>setCurrentKey(key)</code>","text":"<p>Set current widget to that identified by <code>key</code></p> Source code in <code>customQObjects/widgets/stackedwidget.py</code> <pre><code>def setCurrentKey(self, key):\n    \"\"\"Set current widget to that identified by `key`\"\"\"\n    self.setCurrentWidget(self._widgetDict[key])\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TableWidget","title":"<code>TableWidget</code>","text":"<p>               Bases: <code>QTableWidget</code></p> Source code in <code>customQObjects/widgets/tablewidget.py</code> <pre><code>class TableWidget(QTableWidget):\n\n    def __init__(self, horizontalHeader=None, verticalHeader=None, resizeMode=None):\n        super().__init__()\n\n        if horizontalHeader is not None:\n            self.setColumnCount(len(horizontalHeader))\n            self.setHorizontalHeaderLabels(horizontalHeader)\n\n        if verticalHeader is not None:\n            self.setVerticalHeaderLabels(verticalHeader)\n\n        if resizeMode is not None:\n            self.setResizeMode(resizeMode)\n\n        self._header = horizontalHeader\n\n    @property\n    def columnCount(self):\n        return super().columnCount()\n\n    @property\n    def rowCount(self):\n        return super().rowCount()\n\n    @property\n    def header(self):\n        return self._header\n\n    def clearTable(self):\n        for idx in reversed(range(self.rowCount)):\n            self.removeRow(idx)\n\n    def _parseRowKwargs(self, **kwargs):\n        names = [\n            \"background\",\n            \"checkState\",\n            \"data\",\n            \"flags\",\n            \"font\",\n            \"foreground\",\n            \"icon\",\n            \"selected\",\n            \"sizeHint\",\n            \"statusTip\",\n            \"textAlignment\",\n            \"toolTip\",\n            \"whatsThis\",\n        ]\n        d = {}\n        for key in names:\n            if key not in kwargs:\n                continue\n            value = kwargs[key]\n            if key in [\"background\", \"foreground\"]:\n                value = makeBrush(value)\n            d[key] = self._makeRowArgs(value)\n        return d\n\n    def _makeRowArgs(self, value):\n        \"\"\"\n        If `value` is not a list or tuple, create list of `value` repeated `columnCount` times\n\n        If `value` is a list or tuple of values, it will be returned.\n        \"\"\"\n        if not isinstance(value, (list, tuple)):\n            value = [value] * self.columnCount\n        if len(value) != self.columnCount:\n            msg = f\"List of {self.columnCount} values needed, got {value}\"\n            raise ValueError(msg)\n        return value\n\n    def addRow(self, row: list, **kwargs):\n        \"\"\"\n        Add row to table\n\n        Parameters\n        ----------\n        row : list, tuple\n            Sequence of strings or (icon,string) pairs from which to construct\n            [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html)\n        kwargs\n            Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'`\n            will call `setToolTip('this is the tool tip')` after creating the item.\n            `background` and `foreground` can be passed with a\n            [QBrush](https://doc.qt.io/qt-6/qbrush.html),\n            [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg.\n        \"\"\"\n        kwargs = self._parseRowKwargs(**kwargs)\n        rowNum = self.rowCount\n        self.insertRow(rowNum)\n        for col, arg in enumerate(row):\n            if isinstance(arg, (tuple, list)):\n                item = QTableWidgetItem(*arg)\n            else:\n                item = QTableWidgetItem(arg)\n            for name, values in kwargs.items():\n                # call setters with corresponding value\n                name = name[0].upper() + name[1:]\n                func = getattr(item, f\"set{name}\")\n                func(values[col])\n\n            self.setItem(rowNum, col, item)\n\n    def updateRow(self, idx: int, row: list, **kwargs):\n        \"\"\"\n        Update data in row number `idx`\n\n        Parameters\n        ----------\n        idx : int\n            Index of row to update\n        row : list, tuple\n            Sequence of strings or (icon,string) pairs from which to construct\n            [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html)\n        kwargs\n            Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'`\n            will call `setToolTip('this is the tool tip')` on the item.\n            `background` and `foreground` can be passed with a\n            [QBrush](https://doc.qt.io/qt-6/qbrush.html),\n            [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg.\n        \"\"\"\n        for col in self.columnCount:\n            item = self.item(idx, col)\n            # update text and icon\n            if isinstance(row[col], (tuple, list)):\n                icon, text = row[col]\n                item.setIcon(icon)\n            else:\n                text = row[col]\n            item.setText(text)\n            # update any other properties\n            for name, values in kwargs.items():\n                setattr(item, f\"set{name.title()}\", values[col])\n\n    def rowData(self, idx, returnType=\"dict\"):\n        row = [self.item(idx, col).text() for col in range(self.colCount)]\n        if returnType == \"dict\":\n            if len(self.header) != len(row):\n                msg = \"Cannot return row data as dict when horizontal header items are None\"\n                raise Exception(msg)\n            row = dict(zip(self.header, row))\n        return row\n\n    def columnData(self, name):\n        idx = self.header.index(name)\n        column = [self.item(row, idx) for row in range(self.rowCount)]\n        return column\n\n    def rowWhere(self, columnName, value, returnType=\"dict\"):\n        values = []\n        col = self.header.index(columnName)\n        for row in range(self.rowCount):\n            if self.item(row, col).text() == value:\n                values = [self.item(row, idx).text() for idx in range(self.colCount)]\n                break\n        if returnType == \"dict\":\n            if len(self.header) != len(values):\n                msg = (\n                    \"Cannot return row data as dict when horizontal header items or values are None\"\n                )\n                raise ValueError(msg)\n            row = dict(zip(self.header, values))\n        return values\n\n    def setResizeMode(self, mode):\n        \"\"\"\n        Set resize mode for horizontal header\n\n        Parameters\n        ----------\n        mode : {list, QHeaderView.ResizeMode, str}\n            Resize mode. If a single value is given it will be applied to all.\n            Otherwise, pass a list. The values can be\n            [QHeaderView.ResizeMode](https://doc.qt.io/qt-6/qheaderview.html#ResizeMode-enum)\n            or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents'\n            (strings are not case sensitive).\n        \"\"\"\n        error_msg = (\n            \"TableWidget resizeMode should be 'Interactive', 'Fixed', \"\n            f\"'Stretch' or 'ResizeToContents', not '{mode}'\"\n        )\n\n        modes = {\n            \"interactive\": QHeaderView.Interactive,\n            \"fixed\": QHeaderView.Fixed,\n            \"stretch\": QHeaderView.Stretch,\n            \"resizetocontents\": QHeaderView.ResizeToContents,\n        }\n        if isinstance(mode, str):\n            mode = modes.get(mode.lower(), None)\n            if mode is None:\n                raise ValueError(error_msg)\n        if isinstance(mode, list):\n            for idx, m in enumerate(mode):\n                if isinstance(m, str):\n                    mode[idx] = modes.get(m.lower(), None)\n                if mode[idx] not in modes.values():\n                    raise ValueError(error_msg)\n\n        mode = self._makeRowArgs(mode)\n        for idx, m in enumerate(mode):\n            self.horizontalHeader().setSectionResizeMode(idx, m)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TableWidget.addRow","title":"<code>addRow(row, **kwargs)</code>","text":"<p>Add row to table</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>(list, tuple)</code> <p>Sequence of strings or (icon,string) pairs from which to construct QTableWidgetItems</p> required <code>kwargs</code> <p>Any QTableWidgetItem setter can be passed here, e.g. <code>toolTip='this is the tool tip'</code> will call <code>setToolTip('this is the tool tip')</code> after creating the item. <code>background</code> and <code>foreground</code> can be passed with a QBrush, QColor or any valid QColor arg.</p> <code>{}</code> Source code in <code>customQObjects/widgets/tablewidget.py</code> <pre><code>def addRow(self, row: list, **kwargs):\n    \"\"\"\n    Add row to table\n\n    Parameters\n    ----------\n    row : list, tuple\n        Sequence of strings or (icon,string) pairs from which to construct\n        [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html)\n    kwargs\n        Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'`\n        will call `setToolTip('this is the tool tip')` after creating the item.\n        `background` and `foreground` can be passed with a\n        [QBrush](https://doc.qt.io/qt-6/qbrush.html),\n        [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg.\n    \"\"\"\n    kwargs = self._parseRowKwargs(**kwargs)\n    rowNum = self.rowCount\n    self.insertRow(rowNum)\n    for col, arg in enumerate(row):\n        if isinstance(arg, (tuple, list)):\n            item = QTableWidgetItem(*arg)\n        else:\n            item = QTableWidgetItem(arg)\n        for name, values in kwargs.items():\n            # call setters with corresponding value\n            name = name[0].upper() + name[1:]\n            func = getattr(item, f\"set{name}\")\n            func(values[col])\n\n        self.setItem(rowNum, col, item)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TableWidget.setResizeMode","title":"<code>setResizeMode(mode)</code>","text":"<p>Set resize mode for horizontal header</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>(list, ResizeMode, str)</code> <p>Resize mode. If a single value is given it will be applied to all. Otherwise, pass a list. The values can be QHeaderView.ResizeMode or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents' (strings are not case sensitive).</p> <code>list</code> Source code in <code>customQObjects/widgets/tablewidget.py</code> <pre><code>def setResizeMode(self, mode):\n    \"\"\"\n    Set resize mode for horizontal header\n\n    Parameters\n    ----------\n    mode : {list, QHeaderView.ResizeMode, str}\n        Resize mode. If a single value is given it will be applied to all.\n        Otherwise, pass a list. The values can be\n        [QHeaderView.ResizeMode](https://doc.qt.io/qt-6/qheaderview.html#ResizeMode-enum)\n        or corresponding string 'Interactive', 'Fixed', 'Stretch', 'ResizeToContents'\n        (strings are not case sensitive).\n    \"\"\"\n    error_msg = (\n        \"TableWidget resizeMode should be 'Interactive', 'Fixed', \"\n        f\"'Stretch' or 'ResizeToContents', not '{mode}'\"\n    )\n\n    modes = {\n        \"interactive\": QHeaderView.Interactive,\n        \"fixed\": QHeaderView.Fixed,\n        \"stretch\": QHeaderView.Stretch,\n        \"resizetocontents\": QHeaderView.ResizeToContents,\n    }\n    if isinstance(mode, str):\n        mode = modes.get(mode.lower(), None)\n        if mode is None:\n            raise ValueError(error_msg)\n    if isinstance(mode, list):\n        for idx, m in enumerate(mode):\n            if isinstance(m, str):\n                mode[idx] = modes.get(m.lower(), None)\n            if mode[idx] not in modes.values():\n                raise ValueError(error_msg)\n\n    mode = self._makeRowArgs(mode)\n    for idx, m in enumerate(mode):\n        self.horizontalHeader().setSectionResizeMode(idx, m)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TableWidget.updateRow","title":"<code>updateRow(idx, row, **kwargs)</code>","text":"<p>Update data in row number <code>idx</code></p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>Index of row to update</p> required <code>row</code> <code>(list, tuple)</code> <p>Sequence of strings or (icon,string) pairs from which to construct QTableWidgetItems</p> required <code>kwargs</code> <p>Any QTableWidgetItem setter can be passed here, e.g. <code>toolTip='this is the tool tip'</code> will call <code>setToolTip('this is the tool tip')</code> on the item. <code>background</code> and <code>foreground</code> can be passed with a QBrush, QColor or any valid QColor arg.</p> <code>{}</code> Source code in <code>customQObjects/widgets/tablewidget.py</code> <pre><code>def updateRow(self, idx: int, row: list, **kwargs):\n    \"\"\"\n    Update data in row number `idx`\n\n    Parameters\n    ----------\n    idx : int\n        Index of row to update\n    row : list, tuple\n        Sequence of strings or (icon,string) pairs from which to construct\n        [QTableWidgetItems](https://doc.qt.io/qt-6/qtablewidgetitem.html)\n    kwargs\n        Any QTableWidgetItem setter can be passed here, e.g. `toolTip='this is the tool tip'`\n        will call `setToolTip('this is the tool tip')` on the item.\n        `background` and `foreground` can be passed with a\n        [QBrush](https://doc.qt.io/qt-6/qbrush.html),\n        [QColor](https://doc.qt.io/qt-6/qcolor.html) or any valid QColor arg.\n    \"\"\"\n    for col in self.columnCount:\n        item = self.item(idx, col)\n        # update text and icon\n        if isinstance(row[col], (tuple, list)):\n            icon, text = row[col]\n            item.setIcon(icon)\n        else:\n            text = row[col]\n        item.setText(text)\n        # update any other properties\n        for name, values in kwargs.items():\n            setattr(item, f\"set{name.title()}\", values[col])\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TimerDialog","title":"<code>TimerDialog</code>","text":"<p>               Bases: <code>QDialog</code></p> <p>QDialog that will timeout after a given number of milliseconds.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Number of milliseconds for the dialog to be shown. Default is 3000.</p> <code>3000</code> Source code in <code>customQObjects/widgets/timerdialog.py</code> <pre><code>class TimerDialog(QDialog):\n    \"\"\"\n    [QDialog](https://doc.qt.io/qt-5/qdialog.html) that will timeout after a given number of\n    milliseconds.\n\n    Parameters\n    ----------\n    timeout : int\n        Number of milliseconds for the dialog to be shown. Default is 3000.\n    \"\"\"\n\n    def __init__(self, timeout=3000):\n        super().__init__()\n        self._timeout = timeout\n        self.timer = QTimer()\n        self.timer.setInterval(timeout)\n        self.timer.setSingleShot(True)\n        self.timer.timeout.connect(self.accept)\n\n    @property\n    def timeout(self):\n        \"\"\"Return current timeout (ms)\"\"\"\n        return self._timeout\n\n    def exec_(self, *args, **kwargs):\n        \"\"\"Show the dialog and start the timer.\"\"\"\n        self.timer.start()\n        super().exec_(*args, **kwargs)\n\n    def setTimeout(self, timeout):\n        \"\"\"Update `timeout`\"\"\"\n        self._timeout = timeout\n        self.timer.setInterval(timeout)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TimerDialog.timeout","title":"<code>timeout</code>  <code>property</code>","text":"<p>Return current timeout (ms)</p>"},{"location":"widgets/#customQObjects.widgets.TimerDialog.exec_","title":"<code>exec_(*args, **kwargs)</code>","text":"<p>Show the dialog and start the timer.</p> Source code in <code>customQObjects/widgets/timerdialog.py</code> <pre><code>def exec_(self, *args, **kwargs):\n    \"\"\"Show the dialog and start the timer.\"\"\"\n    self.timer.start()\n    super().exec_(*args, **kwargs)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.TimerDialog.setTimeout","title":"<code>setTimeout(timeout)</code>","text":"<p>Update <code>timeout</code></p> Source code in <code>customQObjects/widgets/timerdialog.py</code> <pre><code>def setTimeout(self, timeout):\n    \"\"\"Update `timeout`\"\"\"\n    self._timeout = timeout\n    self.timer.setInterval(timeout)\n</code></pre>"},{"location":"widgets/#customQObjects.widgets.VSplitter","title":"<code>VSplitter</code>","text":"<p>               Bases: <code>Splitter</code></p> <p>Splitter with vertical orientation</p> Source code in <code>customQObjects/widgets/splitter.py</code> <pre><code>class VSplitter(Splitter):\n    \"\"\"[Splitter][customQObjects.widgets.Splitter] with vertical orientation\"\"\"\n\n    def __init__(self, parent=None):\n        super().__init__(Qt.Vertical, parent=parent)\n</code></pre>"}]}